# -*- coding: utf-8 -*-
from __future__ import annotations

from typing import Iterable, List, Sequence

from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QAbstractItemView,
    QCheckBox,
    QDialog,
    QDialogButtonBox,
    QHBoxLayout,
    QLabel,
    QLineEdit,
    QListWidget,
    QListWidgetItem,
    QMessageBox,
    QPushButton,
    QVBoxLayout,
    QWidget,
    QGroupBox,
)

from ..widgets.geo_tree import GeoTree


class RegionSelectDialog(QDialog):
    """Compact region selector based on GeoTree."""

    def __init__(self, initial_region_ids: Sequence[int] | None = None, parent: QWidget | None = None) -> None:
        super().__init__(parent)
        self.setWindowTitle("Select region")
        self.setMinimumSize(420, 360)

        layout = QVBoxLayout(self)

        self._geo_tree = GeoTree(parent=self)
        layout.addWidget(self._geo_tree)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, parent=self)
        buttons.accepted.connect(self._on_accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

        self._apply_initial_selection(initial_region_ids or [225])

    def _apply_initial_selection(self, region_ids: Iterable[int]) -> None:
        ids = set(region_ids or [])
        if not ids:
            return

        tree = self._geo_tree.tree

        def visit(item):
            node_id = item.data(0, Qt.UserRole)
            if node_id in ids:
                item.setCheckState(0, Qt.Checked)
            for idx in range(item.childCount()):
                visit(item.child(idx))

        for index in range(tree.topLevelItemCount()):
            visit(tree.topLevelItem(index))

    def _collect_selection(self) -> tuple[list[int], list[str]]:
        tree = self._geo_tree.tree
        selected_ids: list[int] = []
        selected_labels: list[str] = []

        def visit(item):
            if item.checkState(0) == Qt.Checked:
                node_id = item.data(0, Qt.UserRole)
                if node_id:
                    selected_ids.append(int(node_id))
                    selected_labels.append(item.text(0))
            for idx in range(item.childCount()):
                visit(item.child(idx))

        for index in range(tree.topLevelItemCount()):
            visit(tree.topLevelItem(index))

        return selected_ids, selected_labels

    def _on_accept(self) -> None:
        ids, _ = self._collect_selection()
        if not ids:
            QMessageBox.warning(self, "Select region", "Choose at least one region.")
            return
        self.accept()

    def get_selection(self) -> tuple[list[int], list[str]]:
        """Return selected region ids and their labels."""
        ids, labels = self._collect_selection()
        if not ids:
            ids = [225]
            labels = ["Russia (225)"]
        return ids, labels


class WordstatSettingsDialog(QDialog):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ (–ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Claude UI Task)"""

    def __init__(self, parent: QWidget | None = None) -> None:
        super().__init__(parent)
        self.setWindowTitle("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏")
        self.setMinimumSize(480, 520)

        self._selected_region_ids: list[int] = [225]
        self._selected_region_labels: list[str] = ["–†–æ—Å—Å–∏—è (225)"]

        layout = QVBoxLayout(self)
        
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –ë–î, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∏—Ö –Ω–µ –ø–µ—Ä–µ–¥–∞—Å—Ç
        self._autoload_profiles: list[dict] | None = None

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ Claude UI Task
        lbl_title = QLabel("üéØ –¶–µ–ª—å—é –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:")
        layout.addWidget(lbl_title)
        
        layout.addSpacing(10)

        # –¢–ò–ü–´ –ß–ê–°–¢–û–¢–ù–û–°–¢–ò (–í –°–¢–†–û–ö–£!) - —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        freq_group = QGroupBox("–ò—Å–∫–∞—Ç—å:")
        freq_layout = QHBoxLayout()
        
        self.cb_ws = QCheckBox("—Å–ª–æ–≤–æ")
        self.cb_ws.setChecked(True)  # –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ!
        
        self.cb_qws = QCheckBox('"—Å–ª–æ–≤–æ"')
        self.cb_bws = QCheckBox("!—Å–ª–æ–≤–æ")
        
        freq_layout.addWidget(self.cb_ws)
        freq_layout.addWidget(self.cb_qws)
        freq_layout.addWidget(self.cb_bws)
        freq_layout.addStretch()
        
        freq_group.setLayout(freq_layout)
        layout.addWidget(freq_group)
        
        layout.addSpacing(10)

        # –†–ï–ì–ò–û–ù - —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏  
        region_layout = QHBoxLayout()
        lbl_region = QLabel("üìç –†–µ–≥–∏–æ–Ω:")
        
        self.region_field = QLineEdit()
        self.region_field.setPlaceholderText("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω...")
        self.region_field.setReadOnly(True)
        self._update_region_field()
        
        btn_region = QPushButton("[–í—ã–±—Ä–∞—Ç—å...]")
        btn_region.clicked.connect(self._on_select_region)
        
        region_layout.addWidget(lbl_region)
        region_layout.addWidget(self.region_field, 1)
        region_layout.addWidget(btn_region)
        layout.addLayout(region_layout)
        
        layout.addSpacing(15)

        # –ü–†–û–§–ò–õ–ò (–ê–í–¢–û–ú–ê–¢ –ò–ó –ë–î!) - —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        profiles_group = QGroupBox("üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        profiles_layout = QVBoxLayout()
        
        self.profiles_list = QListWidget()
        self.profiles_list.setSelectionMode(QAbstractItemView.NoSelection)
        profiles_layout.addWidget(self.profiles_list)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        profiles_buttons = QHBoxLayout()
        btn_select_all_prof = QPushButton("[‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ]")
        btn_deselect_all_prof = QPushButton("[‚úó –°–Ω—è—Ç—å –≤—ã–±–æ—Ä]")
        
        btn_select_all_prof.clicked.connect(self._select_all_profiles)
        btn_deselect_all_prof.clicked.connect(self._deselect_all_profiles)
        
        profiles_buttons.addWidget(btn_select_all_prof)
        profiles_buttons.addWidget(btn_deselect_all_prof)
        profiles_buttons.addStretch()
        
        profiles_layout.addLayout(profiles_buttons)
        profiles_group.setLayout(profiles_layout)
        layout.addWidget(profiles_group)

        # –ö–Ω–æ–ø–∫–∏ OK –∏ –û—Ç–º–µ–Ω–∞ (–∫–∞–∫ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ Claude UI Task)
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, parent=self)
        buttons.accepted.connect(self._on_accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

    # ----------------------------------------------------------------- helpers
    def _select_all_profiles(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
        for i in range(self.profiles_list.count()):
            self.profiles_list.item(i).setCheckState(Qt.Checked)
    
    def _deselect_all_profiles(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        for i in range(self.profiles_list.count()):
            self.profiles_list.item(i).setCheckState(Qt.Unchecked)

    def _on_select_region(self) -> None:
        dialog = RegionSelectDialog(self._selected_region_ids, parent=self)
        if dialog.exec():
            ids, labels = dialog.get_selection()
            self._selected_region_ids = ids
            self._selected_region_labels = labels
            self._update_region_field()

    def _update_region_field(self) -> None:
        if self._selected_region_labels:
            self.region_field.setText(", ".join(self._selected_region_labels))
        else:
            self.region_field.setText("–†–æ—Å—Å–∏—è (225)")

    def _on_accept(self) -> None:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–∑–≤–Ω–µ, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ –ë–î
        if self.profiles_list.count() == 0:
            try:
                from ..services.accounts import list_accounts
            except Exception:
                try:
                    from services.accounts import list_accounts  # fallback –Ω–∞ –∫–æ—Ä–µ–Ω—å
                except Exception:
                    list_accounts = None
            if list_accounts is not None:
                profiles = []
                try:
                    for acc in list_accounts():
                        raw_path = getattr(acc, "profile_path", "") or ""
                        if not raw_path:
                            continue
                        profiles.append({
                            "email": acc.name,
                            "profile_path": raw_path,
                            "proxy": getattr(acc, "proxy", None),
                        })
                except Exception:
                    profiles = []
                if profiles:
                    self.set_profiles(profiles)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        if not any(cb.isChecked() for cb in (self.cb_ws, self.cb_qws, self.cb_bws)):
            QMessageBox.warning(self, "–†–µ–∂–∏–º—ã —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
        if not any(self.profiles_list.item(i).checkState() == Qt.Checked for i in range(self.profiles_list.count())):
            QMessageBox.warning(self, "–ü—Ä–æ—Ñ–∏–ª–∏", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return
        
        self.accept()

    # ---------------------------------------------------------------- public API
    def set_profiles(self, profiles: Iterable[dict]) -> None:
        """Populate list of profiles and select all by default."""
        self.profiles_list.clear()
        for profile in profiles:
            email = profile.get("email") or profile.get("name") or str(profile)
            item = QListWidgetItem(email)
            item.setFlags(item.flags() | Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
            item.setCheckState(Qt.Checked)
            item.setData(Qt.UserRole, profile)
            self.profiles_list.addItem(item)

    def set_initial_settings(self, settings: dict | None) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–∞"""
        if not settings:
            return

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
        self._selected_region_ids = list(settings.get("regions") or [225])
        self._selected_region_labels = list(settings.get("region_names") or ["–†–æ—Å—Å–∏—è (225)"])
        self._update_region_field()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º—ã —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        self.cb_ws.setChecked(bool(settings.get("ws", True)))
        self.cb_qws.setChecked(bool(settings.get("qws", False)))
        self.cb_bws.setChecked(bool(settings.get("bws", False)))

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        selected_profiles = settings.get("profiles") or []
        selected_emails = {
            prof.get("email") if isinstance(prof, dict) else prof
            for prof in selected_profiles
        }
        if not selected_emails:
            selected_emails = set(settings.get("profile_emails") or [])

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä –∫ –ø—Ä–æ—Ñ–∏–ª—è–º –≤ —Å–ø–∏—Å–∫–µ
        for index in range(self.profiles_list.count()):
            item = self.profiles_list.item(index)
            profile = item.data(Qt.UserRole)
            email = profile.get("email") if isinstance(profile, dict) else profile
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            should_check = email in selected_emails if selected_emails else True
            item.setCheckState(Qt.Checked if should_check else Qt.Unchecked)

    def get_settings(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å–æ–≥–ª–∞—Å–Ω–æ Claude UI Task —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        chosen_profiles: List[dict] = []
        for index in range(self.profiles_list.count()):
            item = self.profiles_list.item(index)
            if item.checkState() == Qt.Checked:
                profile_data = item.data(Qt.UserRole)
                if isinstance(profile_data, dict):
                    chosen_profiles.append(profile_data)

        # –¢–∏–ø—ã —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        modes = {
            'ws': self.cb_ws.isChecked(),
            'qws': self.cb_qws.isChecked(),
            'bws': self.cb_bws.isChecked()
        }
        
        # –†–µ–≥–∏–æ–Ω
        region_id = self._selected_region_ids[0] if self._selected_region_ids else 225

        return {
            'modes': modes,
            'region': region_id,
            'profiles': chosen_profiles,
            # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
            "collect_wordstat": True,
            "regions": list(self._selected_region_ids) or [225],
            "region_names": list(self._selected_region_labels) or ["–†–æ—Å—Å–∏—è (225)"],
            "ws": self.cb_ws.isChecked(),
            "qws": self.cb_qws.isChecked(), 
            "bws": self.cb_bws.isChecked(),
            "profile_emails": [prof["email"] for prof in chosen_profiles],
        }
