"""
–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ (–∫–∞–∫ –≤ Key Collector)
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ –≤—Å—é –≤—ã—Å–æ—Ç—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –≤–∫–ª–∞–¥–æ–∫
"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem,
    QLineEdit, QLabel, QHeaderView, QHBoxLayout, QPushButton,
    QComboBox, QAbstractItemView
)
from PySide6.QtCore import Qt, Signal
from PySide6.QtGui import QColor


class KeysPanel(QWidget):
    """–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–ª—é—á–∞–º–∏ –≤–æ –≤—Å—é –≤—ã—Å–æ—Ç—É"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    phrase_selected = Signal(str)  # –§—Ä–∞–∑–∞ –≤—ã–±—Ä–∞–Ω–∞
    phrases_filtered = Signal(int)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumWidth(400)
        self.setMaximumWidth(600)
        
        # –î–∞–Ω–Ω—ã–µ
        self._all_data = []  # –í—Å–µ —Ñ—Ä–∞–∑—ã
        self._filtered_data = []  # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        
        self.setup_ui()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        title = QLabel("–ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã")
        title.setStyleSheet("font-weight: bold; font-size: 14px;")
        header_layout.addWidget(title)
        
        self.count_label = QLabel("0 —Ñ—Ä–∞–∑")
        self.count_label.setStyleSheet("color: gray;")
        header_layout.addStretch()
        header_layout.addWidget(self.count_label)
        
        layout.addLayout(header_layout)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_layout = QHBoxLayout()
        
        # –ü–æ–∏—Å–∫
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ —Ñ—Ä–∞–∑–∞–º...")
        self.search_edit.textChanged.connect(self._apply_filter)
        filter_layout.addWidget(self.search_edit, 3)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        self.status_combo = QComboBox()
        self.status_combo.addItems(["–í—Å–µ", "–ì–æ—Ç–æ–≤–æ", "–í –æ—á–µ—Ä–µ–¥–∏", "–û—à–∏–±–∫–∞"])
        self.status_combo.currentTextChanged.connect(self._apply_filter)
        filter_layout.addWidget(self.status_combo, 1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = QPushButton("‚úñ")
        clear_btn.setMaximumWidth(30)
        clear_btn.setToolTip("–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
        clear_btn.clicked.connect(self._clear_filters)
        filter_layout.addWidget(clear_btn)
        
        layout.addLayout(filter_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ñ—Ä–∞–∑–∞–º–∏
        self.table = QTableWidget(0, 6)
        self.table.setHorizontalHeaderLabels([
            "–§—Ä–∞–∑–∞", "WS", '"WS"', "!WS", "–°—Ç–∞—Ç—É—Å", "–ì—Ä—É–ø–ø–∞"
        ])
        
        # –£–±–∏—Ä–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω —è—á–µ–µ–∫ - –¥–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Ñ—Ç–µ)
        self.table.setStyleSheet("""
            QTableWidget {
                background-color: transparent;
                gridline-color: #3a3a3a;
            }
            QTableWidget::item {
                background-color: transparent;
                border: none;
                padding: 5px;
            }
            QTableWidget::item:selected {
                background-color: #0d47a1;
            }
        """)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # –§—Ä–∞–∑–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # WS
        header.setSectionResizeMode(2, QHeaderView.ResizeToContents)  # "WS"
        header.setSectionResizeMode(3, QHeaderView.ResizeToContents)  # !WS
        header.setSectionResizeMode(4, QHeaderView.ResizeToContents)  # –°—Ç–∞—Ç—É—Å
        header.setSectionResizeMode(5, QHeaderView.ResizeToContents)  # –ì—Ä—É–ø–ø–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.table.setSortingEnabled(True)
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Ñ—Ä–∞–∑–µ
        self.table.cellDoubleClicked.connect(self._on_phrase_double_click)
        
        layout.addWidget(self.table, 1)
        
        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        group_btn = QPushButton("üìÅ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
        group_btn.setToolTip("–ù–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º")
        group_btn.clicked.connect(self._create_group)
        actions_layout.addWidget(group_btn)
        
        export_btn = QPushButton("üì• –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.setToolTip("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV")
        export_btn.clicked.connect(self._export_to_csv)
        actions_layout.addWidget(export_btn)
        
        copy_btn = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
        copy_btn.setToolTip("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã")
        copy_btn.clicked.connect(self._copy_selected)
        actions_layout.addWidget(copy_btn)
        
        actions_layout.addStretch()
        
        layout.addLayout(actions_layout)
    
    def load_data(self, data: list[dict]):
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        
        Args:
            data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
                - phrase: str
                - freq_total: int (WS)
                - freq_quotes: int ("WS")
                - freq_exact: int (!WS)
                - status: str
                - group: str (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self._all_data = data
        self._apply_filter()
    
    def _apply_filter(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
        search_text = self.search_edit.text().lower().strip()
        status_filter = self.status_combo.currentText()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filtered = []
        for row in self._all_data:
            phrase = row.get('phrase', '').lower()
            status = row.get('status', '')
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
            if search_text and search_text not in phrase:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if status_filter != "–í—Å–µ":
                status_map = {
                    "–ì–æ—Ç–æ–≤–æ": "ok",
                    "–í –æ—á–µ—Ä–µ–¥–∏": "queued",
                    "–û—à–∏–±–∫–∞": "error"
                }
                if status != status_map.get(status_filter, status_filter):
                    continue
            
            filtered.append(row)
        
        self._filtered_data = filtered
        self._render_table()
    
    def _render_table(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
        self.table.setSortingEnabled(False)  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
        self.table.setRowCount(len(self._filtered_data))
        
        for i, row in enumerate(self._filtered_data):
            # –§—Ä–∞–∑–∞
            phrase_item = QTableWidgetItem(row.get('phrase', ''))
            self.table.setItem(i, 0, phrase_item)
            
            # WS
            ws = row.get('freq_total', 0)
            ws_item = QTableWidgetItem(f"{ws:,}" if ws > 0 else "")
            ws_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.table.setItem(i, 1, ws_item)
            
            # "WS"
            qws = row.get('freq_quotes', 0)
            qws_item = QTableWidgetItem(f"{qws:,}" if qws > 0 else "")
            qws_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.table.setItem(i, 2, qws_item)
            
            # !WS
            bws = row.get('freq_exact', 0)
            bws_item = QTableWidgetItem(f"{bws:,}" if bws > 0 else "")
            bws_item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
            self.table.setItem(i, 3, bws_item)
            
            # –°—Ç–∞—Ç—É—Å
            status = row.get('status', '')
            status_map = {
                'ok': '–ì–æ—Ç–æ–≤–æ',
                'queued': '–í –æ—á–µ—Ä–µ–¥–∏',
                'running': '–ü–∞—Ä—Å–∏–Ω–≥...',
                'error': '–û—à–∏–±–∫–∞'
            }
            status_text = status_map.get(status, status)
            status_item = QTableWidgetItem(status_text)
            
            # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status == 'ok':
                status_item.setForeground(QColor("#4CAF50"))
            elif status == 'error':
                status_item.setForeground(QColor("#F44336"))
            elif status == 'running':
                status_item.setForeground(QColor("#FF9800"))
            
            self.table.setItem(i, 4, status_item)
            
            # –ì—Ä—É–ø–ø–∞
            group = row.get('group', '')
            group_item = QTableWidgetItem(str(group) if group else "")
            self.table.setItem(i, 5, group_item)
        
        self.table.setSortingEnabled(True)  # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        total = len(self._all_data)
        filtered = len(self._filtered_data)
        if filtered < total:
            self.count_label.setText(f"{filtered} –∏–∑ {total} —Ñ—Ä–∞–∑")
        else:
            self.count_label.setText(f"{total} —Ñ—Ä–∞–∑")
        
        self.phrases_filtered.emit(filtered)
    
    def _clear_filters(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
        self.search_edit.clear()
        self.status_combo.setCurrentIndex(0)
    
    def _on_phrase_double_click(self, row, col):
        """–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –Ω–∞ —Ñ—Ä–∞–∑–µ"""
        if 0 <= row < len(self._filtered_data):
            phrase = self._filtered_data[row].get('phrase', '')
            self.phrase_selected.emit(phrase)
    
    def _copy_selected(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        selected_rows = set()
        for item in self.table.selectedItems():
            selected_rows.add(item.row())
        
        phrases = []
        for row in sorted(selected_rows):
            if 0 <= row < len(self._filtered_data):
                phrases.append(self._filtered_data[row].get('phrase', ''))
        
        if phrases:
            from PySide6.QtGui import QClipboard
            from PySide6.QtWidgets import QApplication
            clipboard = QApplication.clipboard()
            clipboard.setText('\n'.join(phrases))
            print(f"[OK] –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(phrases)} —Ñ—Ä–∞–∑ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    
    def _export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ CSV"""
        from PySide6.QtWidgets import QFileDialog, QMessageBox
        from pathlib import Path
        import csv
        
        if not self._filtered_data:
            QMessageBox.warning(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
            str(Path.home() / "keywords.csv"),
            "CSV files (*.csv)"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8-sig', newline='') as f:
                    writer = csv.writer(f)
                    writer.writerow(['–§—Ä–∞–∑–∞', 'WS', '"WS"', '!WS', '–°—Ç–∞—Ç—É—Å', '–ì—Ä—É–ø–ø–∞'])
                    
                    for row in self._filtered_data:
                        writer.writerow([
                            row.get('phrase', ''),
                            row.get('freq_total', 0),
                            row.get('freq_quotes', 0),
                            row.get('freq_exact', 0),
                            row.get('status', ''),
                            row.get('group', '')
                        ])
                
                QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self._filtered_data)} —Ñ—Ä–∞–∑ –≤ {filename}")
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", str(e))
    
    def _create_group(self):
        """–°–æ–∑–¥–∞—Ç—å/–Ω–∞–∑–Ω–∞—á–∏—Ç—å –≥—Ä—É–ø–ø—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ—Ä–∞–∑–∞–º"""
        from PySide6.QtWidgets import QInputDialog, QMessageBox
        
        selected_rows = set()
        for item in self.table.selectedItems():
            selected_rows.add(item.row())
        
        if not selected_rows:
            QMessageBox.warning(self, "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø
        from ..services import frequency as frequency_service
        existing_groups = frequency_service.get_all_groups()
        
        # –î–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞/–≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
        group_name, ok = QInputDialog.getItem(
            self,
            "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É",
            "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:",
            existing_groups + ["<–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞>"],
            0,
            True  # Editable
        )
        
        if ok and group_name:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "<–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞>", –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è
            if group_name == "<–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞>":
                group_name, ok = QInputDialog.getText(
                    self,
                    "–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞",
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:"
                )
                if not ok or not group_name:
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
            phrase_ids = []
            for row in selected_rows:
                if 0 <= row < len(self._filtered_data):
                    # TODO: –ù—É–∂–µ–Ω —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å ID —Ñ—Ä–∞–∑—ã
                    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º mask –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î
            # TODO: –ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ID —Ñ—Ä–∞–∑, –∞ –Ω–µ mask
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for row in selected_rows:
                if 0 <= row < len(self._filtered_data):
                    self._filtered_data[row]['group'] = group_name
            
            # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self._render_table()
            
            QMessageBox.information(
                self,
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞",
                f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group_name}' –¥–ª—è {len(selected_rows)} —Ñ—Ä–∞–∑"
            )
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–Ω–µ–ª—å"""
        self._all_data = []
        self._filtered_data = []
        self.table.setRowCount(0)
        self.count_label.setText("0 —Ñ—Ä–∞–∑")
