"""
–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ (–∫–∞–∫ –≤ Key Collector)
–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ –≤—Å—é –≤—ã—Å–æ—Ç—É —Å–ø—Ä–∞–≤–∞ –æ—Ç –≤–∫–ª–∞–¥–æ–∫
–í–∫–ª–∞–¥–∫–∏: –ö–ª—é—á–∏ –∏ –ì—Ä—É–ø–ø—ã (—Ñ–∞–π–ª 45)
"""

from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QLineEdit, QLabel, QHBoxLayout, QPushButton,
    QTreeWidget, QTreeWidgetItem, QMenu, QInputDialog, QComboBox
)
from PySide6.QtCore import Qt, Signal, QPoint
from PySide6.QtGui import QAction, QColor


class KeysPanel(QWidget):
    """–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–ª—é—á–∞–º–∏ –≤–æ –≤—Å—é –≤—ã—Å–æ—Ç—É (–∫–∞–∫ –≤ Key Collector - —Ñ–∞–π–ª 45)"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    phrase_selected = Signal(str)  # –§—Ä–∞–∑–∞ –≤—ã–±—Ä–∞–Ω–∞
    phrases_filtered = Signal(int)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumWidth(400)
        self.setMaximumWidth(600)
        
        # –î–∞–Ω–Ω—ã–µ
        self._groups = {}  # –ì—Ä—É–ø–ø—ã: {group_name: [phrases]}
        
        self.setup_ui()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –¢–û–õ–¨–ö–û –ì–†–£–ü–ü–´ —Å–ø—Ä–∞–≤–∞ (–∫–∞–∫ –≤ Key Collector)"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(5, 5, 5, 5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏" (–∫–∞–∫ –≤ Key Collector)
        header_layout = QHBoxLayout()
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
        title.setStyleSheet("font-weight: bold;")
        header_layout.addWidget(title)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # –§–∏–ª—å—Ç—Ä "–í—Å–µ" (–∫–∞–∫ –≤ Key Collector)
        self.filter_combo = QComboBox()
        self.filter_combo.addItems(["–í—Å–µ", "–° —Ñ—Ä–∞–∑–∞–º–∏", "–ü—É—Å—Ç—ã–µ", "–ö–æ—Ä–∑–∏–Ω–∞"])
        layout.addWidget(self.filter_combo)
        
        # –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º...")
        self.search_edit.textChanged.connect(self._filter_groups)
        layout.addWidget(self.search_edit)
        
        # –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø (–±–µ–∑ –∫–æ–ª–æ–Ω–æ–∫, –∫–∞–∫ –≤ Key Collector)
        self.groups_tree = QTreeWidget()
        self.groups_tree.setHeaderHidden(True)  # –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.groups_tree.setColumnCount(1)      # –û–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞
        self.groups_tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.groups_tree.customContextMenuRequested.connect(self._groups_context_menu)
        self.groups_tree.setAlternatingRowColors(True)
        self.groups_tree.setAnimated(True)
        
        layout.addWidget(self.groups_tree, 1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏
        groups_actions = QHBoxLayout()
        
        create_group_btn = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å")
        create_group_btn.setToolTip("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É")
        create_group_btn.clicked.connect(self._create_group_in_tree)
        groups_actions.addWidget(create_group_btn)
        
        rename_group_btn = QPushButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        rename_group_btn.setToolTip("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
        rename_group_btn.clicked.connect(self._rename_group)
        groups_actions.addWidget(rename_group_btn)
        
        delete_group_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        delete_group_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
        delete_group_btn.clicked.connect(self._delete_group_from_tree)
        groups_actions.addWidget(delete_group_btn)
        
        groups_actions.addStretch()
        
        layout.addLayout(groups_actions)
    
    def _filter_groups(self, text: str):
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É"""
        text = text.lower().strip()
        
        # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
        if not text:
            for i in range(self.groups_tree.topLevelItemCount()):
                self.groups_tree.topLevelItem(i).setHidden(False)
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
        for i in range(self.groups_tree.topLevelItemCount()):
            item = self.groups_tree.topLevelItem(i)
            group_name = item.text(0).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            if text in group_name:
                item.setHidden(False)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
            has_match = False
            for j in range(item.childCount()):
                child = item.child(j)
                phrase = child.text(0).lower()
                if text in phrase:
                    has_match = True
                    break
            
            item.setHidden(not has_match)
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–Ω–µ–ª—å"""
        self.groups_tree.clear()
        self._groups = {}
        self._render_groups()  # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å (—Å –ö–æ—Ä–∑–∏–Ω–æ–π)
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –í–ö–õ–ê–î–ö–ò "–ì–†–£–ü–ü–´" (—Ñ–∞–π–ª 45) ===
    
    def load_groups(self, groups: dict):
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã –≤ –¥–µ—Ä–µ–≤–æ
        
        Args:
            groups: {group_name: [phrases]} –∏–ª–∏ {cluster_id: {'name': str, 'phrases': [...]}}
        """
        self._groups = groups
        self._render_groups()
    
    def _render_groups(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –¥–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø (–∫–∞–∫ –≤ Key Collector)"""
        self.groups_tree.clear()
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ö–æ—Ä–∑–∏–Ω–∞ (0)" –ø–µ—Ä–≤–æ–π (–∫–∞–∫ –≤ Key Collector)
        trash_item = QTreeWidgetItem([f"–ö–æ—Ä–∑–∏–Ω–∞ (0 / 0)"])
        trash_item.setForeground(0, QColor("#999"))  # –°–µ—Ä—ã–π —Ü–≤–µ—Ç
        self.groups_tree.addTopLevelItem(trash_item)
        
        for group_name, data in self._groups.items():
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if isinstance(data, dict):
                name = data.get('name', str(group_name))
                phrases = data.get('phrases', [])
            else:
                name = str(group_name)
                phrases = data if isinstance(data, list) else []
            
            phrase_count = len(phrases)
            
            # –°—É–º–º–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å WS –≤—Å–µ—Ö —Ñ—Ä–∞–∑ –≤ –≥—Ä—É–ø–ø–µ
            freq_sum = 0
            for phrase_item in phrases:
                if isinstance(phrase_item, dict):
                    freq_sum += phrase_item.get('freq_total', 0)
                # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å = 0
            
            # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: "–Ω–∞–∑–≤–∞–Ω–∏–µ (—Ñ—Ä–∞–∑ / —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å)" - –ö–ê–ö –í KEY COLLECTOR
            root_item = QTreeWidgetItem([f"{name} ({phrase_count} / {freq_sum})"])
            root_item.setExpanded(False)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for phrase_item in phrases[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ (—Å—Ç—Ä–æ–∫–∞) –∏ –Ω–æ–≤–æ–≥–æ (dict) —Ñ–æ—Ä–º–∞—Ç–∞
                if isinstance(phrase_item, dict):
                    phrase_text = phrase_item.get('phrase', str(phrase_item))
                    freq = phrase_item.get('freq_total', 0)
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    if freq > 0:
                        child_item = QTreeWidgetItem([f"  {phrase_text} ({freq})"])
                    else:
                        child_item = QTreeWidgetItem([f"  {phrase_text}"])
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    child_item = QTreeWidgetItem([f"  {phrase_item}"])
                root_item.addChild(child_item)
            
            # –ï—Å–ª–∏ —Ñ—Ä–∞–∑ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º "..."
            if len(phrases) > 10:
                more_item = QTreeWidgetItem([f"  ... –µ—â–µ {len(phrases) - 10} —Ñ—Ä–∞–∑"])
                root_item.addChild(more_item)
            
            self.groups_tree.addTopLevelItem(root_item)
    
    def _groups_context_menu(self, pos: QPoint):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–µ—Ä–µ–≤–µ –≥—Ä—É–ø–ø"""
        menu = QMenu(self)
        
        item = self.groups_tree.itemAt(pos)
        
        # –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
        create_action = QAction("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", self)
        create_action.triggered.connect(self._create_group_in_tree)
        menu.addAction(create_action)
        
        if item:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç (–≥—Ä—É–ø–ø–∞)
            if item.parent() is None:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
                rename_action = QAction("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", self)
                rename_action.triggered.connect(self._rename_group)
                menu.addAction(rename_action)
                
                # –£–¥–∞–ª–∏—Ç—å
                delete_action = QAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", self)
                delete_action.triggered.connect(self._delete_group_from_tree)
                menu.addAction(delete_action)
                
                menu.addSeparator()
                
                # –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø—ã
                export_action = QAction("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É", self)
                export_action.triggered.connect(lambda: self._export_group(item))
                menu.addAction(export_action)
        
        menu.exec(self.groups_tree.mapToGlobal(pos))
    
    def _create_group_in_tree(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
        name, ok = QInputDialog.getText(
            self,
            "–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞",
            "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:"
        )
        
        if ok and name.strip():
            name = name.strip()
            if name in self._groups:
                from PySide6.QtWidgets import QMessageBox
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ì—Ä—É–ø–ø–∞ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –≥—Ä—É–ø–ø—É
            self._groups[name] = []
            self._render_groups()
            
            print(f"[OK] –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {name}")
    
    def _rename_group(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É"""
        item = self.groups_tree.currentItem()
        if not item or item.parent() is not None:
            return
        
        old_name = item.text(0)
        new_name, ok = QInputDialog.getText(
            self,
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É",
            "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            text=old_name
        )
        
        if ok and new_name.strip() and new_name != old_name:
            new_name = new_name.strip()
            
            if new_name in self._groups:
                from PySide6.QtWidgets import QMessageBox
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ì—Ä—É–ø–ø–∞ '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
            self._groups[new_name] = self._groups.pop(old_name)
            self._render_groups()
            
            print(f"[OK] –ì—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_name} ‚Üí {new_name}")
    
    def _delete_group_from_tree(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É"""
        item = self.groups_tree.currentItem()
        if not item or item.parent() is not None:
            return
        
        group_name = item.text(0)
        
        from PySide6.QtWidgets import QMessageBox
        reply = QMessageBox.question(
            self,
            "–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
            f"–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{group_name}' ({item.text(1)} —Ñ—Ä–∞–∑)?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if group_name in self._groups:
                del self._groups[group_name]
                self._render_groups()
                print(f"[OK] –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞: {group_name}")
    
    def _export_group(self, item: QTreeWidgetItem):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –≤ CSV"""
        from PySide6.QtWidgets import QFileDialog, QMessageBox
        from pathlib import Path
        import csv
        
        group_name = item.text(0)
        phrases = self._groups.get(group_name, [])
        
        if isinstance(phrases, dict):
            phrases = phrases.get('phrases', [])
        
        if not phrases:
            QMessageBox.warning(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ì—Ä—É–ø–ø–∞ –ø—É—Å—Ç–∞")
            return
        
        filename, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä—É–ø–ø—ã",
            str(Path.home() / f"{group_name}.csv"),
            "CSV files (*.csv)"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8-sig', newline='') as f:
                    writer = csv.writer(f)
                    writer.writerow(['–§—Ä–∞–∑–∞'])
                    for phrase in phrases:
                        writer.writerow([str(phrase)])
                
                QMessageBox.information(
                    self,
                    "–≠–∫—Å–ø–æ—Ä—Ç",
                    f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(phrases)} —Ñ—Ä–∞–∑ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_name}'"
                )
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", str(e))
