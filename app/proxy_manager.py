"""
Proxy Manager - –º–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ (–∫–∞–∫ –≤ Key Collector)
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å ProxyStore –∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""

from PySide6 import QtWidgets, QtCore, QtGui
from PySide6.QtCore import QThread, Signal
import asyncio
import aiohttp
import time
from datetime import datetime
from typing import List, Dict

try:
    from aiohttp_socks import ProxyConnector
except ImportError:
    ProxyConnector = None

try:
    from ..core import proxy_store
except ImportError:
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    import sys
    sys.path.insert(0, "C:/AI/yandex/semtool")
    from core import proxy_store

from ..services import accounts as account_service


async def check_http_proxy(px: Dict, timeout: float = 5.0) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP/HTTPS –ø—Ä–æ–∫—Å–∏ (–±–µ–∑ ssl:default –æ—à–∏–±–æ–∫)"""
    t0 = time.perf_counter()
    timeout_obj = aiohttp.ClientTimeout(total=timeout)
    
    try:
        async with aiohttp.ClientSession(timeout=timeout_obj) as session:
            proxy_auth = None
            if px.get("login"):
                proxy_auth = aiohttp.BasicAuth(px["login"], px.get("password", ""))
            
            # httpbin –ø–æ http, ssl=False - –∏–∑–±–µ–≥–∞–µ–º ssl:default
            async with session.get(
                "http://httpbin.org/ip",
                proxy=px["server"],
                proxy_auth=proxy_auth,
                ssl=False
            ) as response:
                await response.text()
        
        elapsed_ms = int((time.perf_counter() - t0) * 1000)
        return ("OK", elapsed_ms, "")
    
    except asyncio.TimeoutError:
        elapsed_ms = int((time.perf_counter() - t0) * 1000)
        return ("TIMEOUT", elapsed_ms, "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç")
    
    except Exception as e:
        elapsed_ms = int((time.perf_counter() - t0) * 1000)
        return ("FAIL", elapsed_ms, str(e)[:120])


async def check_socks_proxy(px: Dict, timeout: float = 5.0) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SOCKS –ø—Ä–æ–∫—Å–∏"""
    if ProxyConnector is None:
        return ("ERR", None, "aiohttp_socks –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    t0 = time.perf_counter()
    
    try:
        conn = ProxyConnector.from_url(
            px["server"],
            rdns=True,
            username=px.get("login") or None,
            password=px.get("password") or None
        )
        
        timeout_obj = aiohttp.ClientTimeout(total=timeout)
        async with aiohttp.ClientSession(connector=conn, timeout=timeout_obj) as session:
            async with session.get("http://httpbin.org/ip") as response:
                await response.text()
        
        elapsed_ms = int((time.perf_counter() - t0) * 1000)
        return ("OK", elapsed_ms, "")
    
    except asyncio.TimeoutError:
        elapsed_ms = int((time.perf_counter() - t0) * 1000)
        return ("TIMEOUT", elapsed_ms, "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç")
    
    except Exception as e:
        elapsed_ms = int((time.perf_counter() - t0) * 1000)
        return ("FAIL", elapsed_ms, str(e)[:120])


async def check_one_proxy(px: Dict, timeout: float = 5.0) -> tuple:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏"""
    try:
        if px["scheme"].startswith("socks"):
            return await check_socks_proxy(px, timeout)
        else:
            return await check_http_proxy(px, timeout)
    except Exception as e:
        return ("FAIL", None, str(e)[:120])


class ProxyCheckThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ asyncio"""
    
    progress = Signal(int, str, int, str)  # proxy_id, status, latency, error
    finished = Signal()
    
    def __init__(self, proxies: List[Dict], timeout: float = 5.0):
        super().__init__()
        self.proxies = proxies
        self.timeout = timeout
        self._stop = False
    
    def stop(self):
        self._stop = True
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç asyncio event loop –≤ –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(self._check_all())
        finally:
            loop.close()
            self.finished.emit()
    
    async def _check_all(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        sem = asyncio.Semaphore(40)  # 40 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        
        async def check_one(px):
            if self._stop:
                return
            
            async with sem:
                status, latency, error = await check_one_proxy(px, self.timeout)
                self.progress.emit(px['id'], status, latency or 0, error)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ ProxyStore
                proxy_store.update_proxy_status(px['id'], status, latency, error)
        
        tasks = [check_one(px) for px in self.proxies]
        await asyncio.gather(*tasks, return_exceptions=True)


class ProxyManagerDialog(QtWidgets.QDialog):
    """–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ (–∫–∞–∫ –≤ Key Collector)"""
    
    BASE_COLUMNS = ["ID", "Proxy", "–¢–∏–ø", "–õ–æ–≥–∏–Ω", "–°—Ç–∞—Ç—É—Å", "–ü–∏–Ω–≥ (–º—Å)"]
    TAIL_COLUMNS = ["–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ"]
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üîå –ü—Ä–æ–∫—Å–∏-–º–µ–Ω–µ–¥–∂–µ—Ä")
        self.setModal(False)  # –í–ê–ñ–ù–û: –Ω–µ–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.resize(1400, 650)
        
        self._proxies: List[Dict] = []
        self._check_thread = None
        self._accounts_map = {}  # {proxy_raw: [account_names]}
        self._accounts_list = []  # –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        self._account_columns = []  # –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
        
        # –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º UI (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤)
        self._load_accounts_info()
        
        self._create_ui()
        self._load_from_store()
        
        # –ï—Å–ª–∏ ProxyStore –ø—É—Å—Ç–æ–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if not self._proxies:
            added = proxy_store.sync_from_accounts()
            if added > 0:
                self._load_from_store()
                print(f"[Proxy Manager] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {added} –ø—Ä–æ–∫—Å–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏
        self._load_accounts_map()
    
    def _load_accounts_info(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"""
        accounts = account_service.list_accounts()
        self._accounts_list = [acc for acc in accounts if acc.name not in ["demo_account", "wordstat_main"]]
        self._account_columns = [acc.name for acc in self._accounts_list]
    
    def _create_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        layout = QtWidgets.QVBoxLayout(self)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QtWidgets.QHBoxLayout()
        
        self.btn_paste = QtWidgets.QPushButton("üìã –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞")
        self.btn_load_file = QtWidgets.QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å .txt")
        self.btn_sync = QtWidgets.QPushButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        self.btn_check_all = QtWidgets.QPushButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ")
        self.btn_stop = QtWidgets.QPushButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.btn_apply = QtWidgets.QPushButton("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
        self.btn_auto_distribute = QtWidgets.QPushButton("‚ö° –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        self.btn_export = QtWidgets.QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç OK")
        self.btn_clear = QtWidgets.QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_close = QtWidgets.QPushButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        
        self.btn_stop.setEnabled(False)
        
        buttons_layout.addWidget(self.btn_paste)
        buttons_layout.addWidget(self.btn_load_file)
        buttons_layout.addWidget(self.btn_sync)
        buttons_layout.addWidget(self.btn_check_all)
        buttons_layout.addWidget(self.btn_stop)
        buttons_layout.addWidget(self.btn_apply)
        buttons_layout.addWidget(self.btn_auto_distribute)
        buttons_layout.addWidget(self.btn_export)
        buttons_layout.addWidget(self.btn_clear)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.btn_close)
        
        layout.addLayout(buttons_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_layout = QtWidgets.QHBoxLayout()
        settings_layout.addWidget(QtWidgets.QLabel("–ü–æ—Ç–æ–∫–æ–≤:"))
        
        self.spin_threads = QtWidgets.QSpinBox()
        self.spin_threads.setRange(1, 100)
        self.spin_threads.setValue(40)
        settings_layout.addWidget(self.spin_threads)
        
        settings_layout.addWidget(QtWidgets.QLabel("–¢–∞–π–º–∞—É—Ç (—Å–µ–∫):"))
        
        self.spin_timeout = QtWidgets.QSpinBox()
        self.spin_timeout.setRange(1, 60)
        self.spin_timeout.setValue(5)
        settings_layout.addWidget(self.spin_timeout)
        
        settings_layout.addStretch()
        
        self.lbl_stats = QtWidgets.QLabel("–í—Å–µ–≥–æ: 0 | OK: 0 | FAIL: 0")
        settings_layout.addWidget(self.lbl_stats)
        
        layout.addLayout(settings_layout)
        
        # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –°–¢–û–õ–ë–¶–´: BASE + –ê–ö–ö–ê–£–ù–¢–´ + TAIL
        all_columns = self.BASE_COLUMNS + self._account_columns + self.TAIL_COLUMNS
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        self.table = QtWidgets.QTableWidget(0, len(all_columns))
        self.table.setHorizontalHeaderLabels(all_columns)
        self.table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        self.table.setAlternatingRowColors(True)
        
        # –í–ê–ñ–ù–û: –ó–∞–ø—Ä–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ –ö–µ–π-–ö–æ–ª–ª–µ–∫—Ç–æ—Ä–µ)
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.table.setTextElideMode(QtCore.Qt.ElideRight)
        self.table.setWordWrap(False)
        
        header = self.table.horizontalHeader()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        # BASE: ID, Proxy, –¢–∏–ø, –õ–æ–≥–∏–Ω, –°—Ç–∞—Ç—É—Å, –ü–∏–Ω–≥
        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Interactive)  # ID
        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)  # Proxy
        header.setSectionResizeMode(2, QtWidgets.QHeaderView.Interactive)  # –¢–∏–ø
        header.setSectionResizeMode(3, QtWidgets.QHeaderView.Interactive)  # –õ–æ–≥–∏–Ω
        header.setSectionResizeMode(4, QtWidgets.QHeaderView.Interactive)  # –°—Ç–∞—Ç—É—Å
        header.setSectionResizeMode(5, QtWidgets.QHeaderView.Interactive)  # –ü–∏–Ω–≥
        
        # –ê–ö–ö–ê–£–ù–¢–´: –∞–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (‚úì –∏–ª–∏ –ø—É—Å—Ç–æ)
        base_col_count = len(self.BASE_COLUMNS)
        for i in range(len(self._account_columns)):
            col_idx = base_col_count + i
            header.setSectionResizeMode(col_idx, QtWidgets.QHeaderView.ResizeToContents)
        
        # TAIL: –û—à–∏–±–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω—è—è - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è)
        tail_start = base_col_count + len(self._account_columns)
        for i in range(len(self.TAIL_COLUMNS) - 1):
            header.setSectionResizeMode(tail_start + i, QtWidgets.QHeaderView.Interactive)
        
        header.setStretchLastSection(True)  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        layout.addWidget(self.table)
        
        # –í–ê–ñ–ù–û: –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "–õ–æ–≥–∏–Ω" (–∫–∞–∫ –≤ —Ñ–∞–π–ª–µ 43 - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω—ã –ø—Ä–æ–∫—Å–∏)
        # –õ–æ–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ tooltip –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ Proxy
        self.table.setColumnHidden(3, True)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.btn_paste.clicked.connect(self._on_paste)
        self.btn_load_file.clicked.connect(self._on_load_file)
        self.btn_sync.clicked.connect(self._on_sync_accounts)
        self.btn_check_all.clicked.connect(self._on_check_all)
        self.btn_stop.clicked.connect(self._on_stop)
        self.btn_apply.clicked.connect(self._on_apply_to_accounts)
        self.btn_auto_distribute.clicked.connect(self._on_auto_distribute)
        self.btn_export.clicked.connect(self._on_export)
        self.btn_clear.clicked.connect(self._on_clear)
        self.btn_close.clicked.connect(self.close)
    
    def _load_from_store(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ ProxyStore (–ë–ï–ó –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã)"""
        try:
            self._proxies = proxy_store.get_all_proxies()
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ store: {e}")
            self._proxies = []
    
    def _load_accounts_map(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        self._accounts_map = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = account_service.list_accounts()
        self._accounts_list = [acc for acc in accounts if acc.name not in ["demo_account", "wordstat_main"]]
        
        for acc in self._accounts_list:
            if acc.proxy:
                if acc.proxy not in self._accounts_map:
                    self._accounts_map[acc.proxy] = []
                self._accounts_map[acc.proxy].append(acc.name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self._refresh_table()
    
    def _refresh_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        self.table.setRowCount(len(self._proxies))
        
        base_col_count = len(self.BASE_COLUMNS)
        account_col_count = len(self._account_columns)
        
        for row, px in enumerate(self._proxies):
            # BASE COLUMNS
            col = 0
            
            # ID
            self.table.setItem(row, col, QtWidgets.QTableWidgetItem(str(px['id'])))
            col += 1
            
            # Proxy —Å —Ç—É–ª—Ç–∏–ø–æ–º
            proxy_item = QtWidgets.QTableWidgetItem(px['raw'])
            proxy_item.setToolTip(px['raw'])
            self.table.setItem(row, col, proxy_item)
            col += 1
            
            # –¢–∏–ø
            self.table.setItem(row, col, QtWidgets.QTableWidgetItem(px['scheme'].upper()))
            col += 1
            
            # –õ–æ–≥–∏–Ω
            self.table.setItem(row, col, QtWidgets.QTableWidgetItem(px['login'] or ""))
            col += 1
            
            # –°—Ç–∞—Ç—É—Å
            status = px['last_status'] or "WAIT"
            status_item = QtWidgets.QTableWidgetItem(status)
            status_item.setTextAlignment(QtCore.Qt.AlignCenter)
            
            if status == "OK":
                status_item.setForeground(QtGui.QBrush(QtGui.QColor("#4CAF50")))
            elif status in ("FAIL", "TIMEOUT", "ERR"):
                status_item.setForeground(QtGui.QBrush(QtGui.QColor("#F44336")))
            
            self.table.setItem(row, col, status_item)
            col += 1
            
            # –ü–∏–Ω–≥
            self.table.setItem(row, col, QtWidgets.QTableWidgetItem(str(px['latency_ms'] or "")))
            col += 1
            
            # –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –°–¢–û–õ–ë–¶–´ –ê–ö–ö–ê–£–ù–¢–û–í (‚úì –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω)
            accounts_using = self._accounts_map.get(px['raw'], [])
            
            for acc_name in self._account_columns:
                check_item = QtWidgets.QTableWidgetItem()
                check_item.setTextAlignment(QtCore.Qt.AlignCenter)
                
                if acc_name in accounts_using:
                    check_item.setText("‚úì")
                    check_item.setForeground(QtGui.QBrush(QtGui.QColor("#4CAF50")))  # –ó–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞
                else:
                    check_item.setText("")
                
                check_item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
                self.table.setItem(row, col, check_item)
                col += 1
            
            # TAIL COLUMNS: –û—à–∏–±–∫–∞, –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ
            self.table.setItem(row, col, QtWidgets.QTableWidgetItem(px['last_error'] or ""))
            col += 1
            
            checked_at = ""
            if px['last_check']:
                checked_at = px['last_check'].strftime("%Y-%m-%d %H:%M:%S") if isinstance(px['last_check'], datetime) else str(px['last_check'])
            
            self.table.setItem(row, col, QtWidgets.QTableWidgetItem(checked_at))
        
        self._update_stats()
    
    def _on_paste(self):
        """–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        text = QtWidgets.QApplication.clipboard().text()
        added = 0
        
        for line in text.splitlines():
            proxy = proxy_store.add_proxy(line)
            if proxy:
                added += 1
        
        self._load_from_store()
        self._load_accounts_map()
        
        QtWidgets.QMessageBox.information(
            self,
            "–î–æ–±–∞–≤–ª–µ–Ω–æ",
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {added}"
        )
    
    def _on_load_file(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞"""
        path, _ = QtWidgets.QFileDialog.getOpenFileName(
            self,
            "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏",
            "",
            "Text Files (*.txt);;All Files (*.*)"
        )
        
        if not path:
            return
        
        added = 0
        try:
            with open(path, "r", encoding="utf-8", errors="ignore") as f:
                for line in f:
                    proxy = proxy_store.add_proxy(line.strip())
                    if proxy:
                        added += 1
            
            self._load_from_store()
            self._load_accounts_map()
            
            QtWidgets.QMessageBox.information(
                self,
                "–ó–∞–≥—Ä—É–∂–µ–Ω–æ",
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {added}"
            )
        except Exception as e:
            QtWidgets.QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}"
            )
    
    def _on_sync_accounts(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        added = proxy_store.sync_from_accounts()
        self._load_from_store()
        self._load_accounts_map()  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        
        QtWidgets.QMessageBox.information(
            self,
            "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {added}"
        )
    
    def _on_check_all(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏"""
        if not self._proxies:
            QtWidgets.QMessageBox.warning(
                self,
                "–ù–µ—Ç –ø—Ä–æ–∫—Å–∏",
                "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            )
            return
        
        self.btn_check_all.setEnabled(False)
        self.btn_stop.setEnabled(True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ QThread
        timeout = self.spin_timeout.value()
        self._check_thread = ProxyCheckThread(self._proxies, timeout)
        self._check_thread.progress.connect(self._on_check_progress)
        self._check_thread.finished.connect(self._on_check_finished)
        self._check_thread.start()
    
    def _on_check_progress(self, proxy_id: int, status: str, latency: int, error: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å proxy_id
        for row in range(self.table.rowCount()):
            if int(self.table.item(row, 0).text()) == proxy_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_item = QtWidgets.QTableWidgetItem(status)
                status_item.setTextAlignment(QtCore.Qt.AlignCenter)
                
                if status == "OK":
                    status_item.setBackground(QtGui.QColor("#d4edda"))
                elif status in ("FAIL", "TIMEOUT", "ERR"):
                    status_item.setBackground(QtGui.QColor("#f8d7da"))
                
                self.table.setItem(row, 4, status_item)
                self.table.setItem(row, 5, QtWidgets.QTableWidgetItem(str(latency) if latency else ""))
                # row 6 - "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                self.table.setItem(row, 7, QtWidgets.QTableWidgetItem(error))
                self.table.setItem(row, 8, QtWidgets.QTableWidgetItem(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                break
        
        self._update_stats()
    
    def _on_check_finished(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
        self.btn_check_all.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self._load_from_store()
        self._load_accounts_map()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î —Å –ø—Ä–∏–≤—è–∑–∫–æ–π
    
    def _on_stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"""
        if self._check_thread:
            self._check_thread.stop()
        
        self.btn_check_all.setEnabled(True)
        self.btn_stop.setEnabled(False)
    
    def _on_apply_to_accounts(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        selected_rows = set(item.row() for item in self.table.selectedItems())
        
        if not selected_rows:
            QtWidgets.QMessageBox.warning(
                self,
                "–ù–µ –≤—ã–±—Ä–∞–Ω–æ",
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
            )
            return
        
        selected_proxies = [self._proxies[row] for row in selected_rows]
        
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = account_service.list_accounts()
        account_names = [acc.name for acc in accounts if acc.name not in ["demo_account", "wordstat_main"]]
        
        dialog = QtWidgets.QDialog(self)
        dialog.setWindowTitle("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
        dialog.resize(400, 300)
        
        layout = QtWidgets.QVBoxLayout(dialog)
        layout.addWidget(QtWidgets.QLabel(f"–í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(selected_proxies)}"))
        layout.addWidget(QtWidgets.QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:"))
        
        list_widget = QtWidgets.QListWidget()
        list_widget.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection)
        for name in account_names:
            list_widget.addItem(name)
        layout.addWidget(list_widget)
        
        buttons = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Cancel
        )
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)
        
        if dialog.exec() == QtWidgets.QDialog.Accepted:
            selected_account_names = [item.text() for item in list_widget.selectedItems()]
            
            if not selected_account_names:
                QtWidgets.QMessageBox.warning(self, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
                return
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–ø–æ –∫—Ä—É–≥—É –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ)
            updated = 0
            for i, acc_name in enumerate(selected_account_names):
                proxy = selected_proxies[i % len(selected_proxies)]
                account_service.update_account_proxy(acc_name, proxy['raw'])
                updated += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
            self._load_accounts_map()
            
            QtWidgets.QMessageBox.information(
                self,
                "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ",
                f"–ü—Ä–æ–∫—Å–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ {updated} –∞–∫–∫–∞—É–Ω—Ç–∞–º"
            )
    
    def _on_auto_distribute(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ OK –ø—Ä–æ–∫—Å–∏ –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏
        ok_proxies = [px for px in self._proxies if px.get('last_status') == 'OK']
        
        if not ok_proxies:
            QtWidgets.QMessageBox.warning(
                self,
                "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏",
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏. –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–∫—Å–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º OK."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫—Ä–æ–º–µ demo –∏ wordstat_main)
        accounts = account_service.list_accounts()
        target_accounts = [acc for acc in accounts if acc.name not in ["demo_account", "wordstat_main"]]
        
        if not target_accounts:
            QtWidgets.QMessageBox.warning(
                self,
                "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"
            )
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        reply = QtWidgets.QMessageBox.question(
            self,
            "–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏",
            f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å {len(ok_proxies)} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏ –ø–æ {len(target_accounts)} –∞–∫–∫–∞—É–Ω—Ç–∞–º?\n\n"
            f"–ü—Ä–æ–∫—Å–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–æ –∫—Ä—É–≥—É (round-robin).",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        
        if reply != QtWidgets.QMessageBox.Yes:
            return
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫—Ä—É–≥—É (round-robin)
        updated = 0
        for i, acc in enumerate(target_accounts):
            proxy = ok_proxies[i % len(ok_proxies)]
            account_service.update_account_proxy(acc.name, proxy['raw'])
            updated += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –∏ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
        self._load_accounts_map()
        
        QtWidgets.QMessageBox.information(
            self,
            "–ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ {updated} –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n"
            f"–†–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏: {len(ok_proxies)}\n"
            f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(target_accounts)}\n"
            f"–ú–µ—Ç–æ–¥: round-robin (–ø–æ –∫—Ä—É–≥—É)\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤—É—é —Ç–∞–±–ª–∏—Ü—É –ê–∫–∫–∞—É–Ω—Ç—ã"
        )
    
    def _on_export(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏"""
        ok_proxies = [px for px in self._proxies if px['last_status'] == 'OK']
        
        if not ok_proxies:
            QtWidgets.QMessageBox.warning(
                self,
                "–ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏",
                "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏"
            )
            return
        
        path, _ = QtWidgets.QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ–∫—Å–∏",
            "working_proxies.txt",
            "Text Files (*.txt)"
        )
        
        if path:
            try:
                with open(path, "w", encoding="utf-8") as f:
                    f.write("\n".join([px['raw'] for px in ok_proxies]))
                
                QtWidgets.QMessageBox.information(
                    self,
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {len(ok_proxies)}"
                )
            except Exception as e:
                QtWidgets.QMessageBox.critical(
                    self,
                    "–û—à–∏–±–∫–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}"
                )
    
    def _on_clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏"""
        reply = QtWidgets.QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No
        )
        
        if reply == QtWidgets.QMessageBox.Yes:
            proxy_store.clear_all()
            self._load_from_store()
            self._load_accounts_map()
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = len(self._proxies)
        ok = sum(1 for px in self._proxies if px['last_status'] == 'OK')
        fail = sum(1 for px in self._proxies if px['last_status'] in ('FAIL', 'TIMEOUT', 'ERR'))
        
        self.lbl_stats.setText(f"–í—Å–µ–≥–æ: {total} | OK: {ok} | FAIL: {fail}")

    
    def _refresh_accounts_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∞–≤—É—é —Ç–∞–±–ª–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if not hasattr(self, '_accounts_list'):
            return
        
        if not hasattr(self, 'accounts_table'):
            return
        
        self.accounts_table.setRowCount(len(self._accounts_list))
        
        for row, acc in enumerate(self._accounts_list):
            # –ê–∫–∫–∞—É–Ω—Ç
            name_item = QtWidgets.QTableWidgetItem(acc.name)
            name_item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            self.accounts_table.setItem(row, 0, name_item)
            
            # –ü—Ä–æ–∫—Å–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
            proxy_text = ""
            if acc.proxy:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ host:port (–±–µ–∑ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è)
                try:
                    from ..utils.proxy import parse_proxy
                    parsed = parse_proxy(acc.proxy)
                    if parsed:
                        proxy_text = parsed['server'].replace('http://', '').replace('https://', '').replace('socks5://', '')
                    else:
                        proxy_text = acc.proxy[:30]
                except:
                    proxy_text = acc.proxy[:30]
            
            proxy_item = QtWidgets.QTableWidgetItem(proxy_text)
            proxy_item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            
            if acc.proxy:
                proxy_item.setToolTip(f"–ü–æ–ª–Ω—ã–π –ø—Ä–æ–∫—Å–∏:\n{acc.proxy}")
            
            self.accounts_table.setItem(row, 1, proxy_item)
            
            # –°—Ç–∞—Ç—É—Å (–∫—É–∫–∏)
            try:
                from ..services.accounts import get_cookies_status
                cookies_status = get_cookies_status(acc)
            except:
                cookies_status = "?"
            
            status_item = QtWidgets.QTableWidgetItem(cookies_status)
            status_item.setTextAlignment(QtCore.Qt.AlignCenter)
            status_item.setFlags(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled)
            
            if cookies_status == "Fresh":
                status_item.setForeground(QtGui.QBrush(QtGui.QColor("#4CAF50")))
            elif cookies_status == "Expired":
                status_item.setForeground(QtGui.QBrush(QtGui.QColor("#F44336")))
            
            self.accounts_table.setItem(row, 2, status_item)
