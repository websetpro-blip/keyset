# app/tabs/parsing_tab.py
from __future__ import annotations
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QSplitter, QPushButton,
                               QTextEdit, QLabel, QSpinBox, QCheckBox, QComboBox, QTableWidget, 
                               QTableWidgetItem, QProgressBar, QInputDialog, QFileDialog, QApplication)
from PySide6.QtCore import Qt, QThread, Signal, QPoint
from ..widgets.geo_tree import GeoTree
from ..keys_panel import KeysPanel  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π KeysPanel
from ..widgets.add_actions_popup import AddActionsPopup
import time


def _to_int0(value):
    """Convert value to int, return 0 for empty/None values"""
    if value is None or value == '' or value == '-':
        return 0
    try:
        return int(value)
    except (ValueError, TypeError):
        return 0


class ParsingWorker(QThread):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    tick = Signal(dict)      # —Å–æ–±—ã—Ç–∏—è –¥–ª—è UI
    done = Signal(list)      # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    def __init__(self, phrases: list[str], modes: dict, depth_cfg: dict, geo_ids: list[int], parent=None):
        super().__init__(parent)
        self.phrases = phrases
        self.modes = modes
        self.depth_cfg = depth_cfg
        self.geo_ids = geo_ids
        self._stop = False
    
    def stop(self):
        self._stop = True
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        try:
            from ...services import frequency as freq_service
        except ImportError:
            # –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            freq_service = None
        
        rows = []
        total = len(self.phrases)
        
        for i, phrase in enumerate(self.phrases, start=1):
            if self._stop:
                break
            
            rec = {"phrase": phrase}
            
            # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
            if freq_service:
                if self.modes.get("ws"):
                    # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
                    try:
                        result = freq_service.parse_frequency([phrase], self.geo_ids[0] if self.geo_ids else 225)
                        rec["ws"] = _to_int0(result[0].get("freq_total", 0) if result else 0)
                    except Exception:
                        rec["ws"] = 0
                
                if self.modes.get("qws"):
                    # –í –∫–∞–≤—ã—á–∫–∞—Ö
                    try:
                        result = freq_service.parse_frequency([f'"{phrase}"'], self.geo_ids[0] if self.geo_ids else 225)
                        rec["qws"] = _to_int0(result[0].get("freq_quotes", 0) if result else 0)
                    except Exception:
                        rec["qws"] = 0
                
                if self.modes.get("bws"):
                    # –¢–æ—á–Ω–∞—è
                    try:
                        words = phrase.split()
                        exact_phrase = " ".join([f"!{w}" for w in words])
                        result = freq_service.parse_frequency([exact_phrase], self.geo_ids[0] if self.geo_ids else 225)
                        rec["bws"] = _to_int0(result[0].get("freq_exact", 0) if result else 0)
                    except Exception:
                        rec["bws"] = 0
            else:
                # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                import random
                if self.modes.get("ws"): rec["ws"] = random.randint(100, 10000)
                if self.modes.get("qws"): rec["qws"] = random.randint(50, 5000)
                if self.modes.get("bws"): rec["bws"] = random.randint(10, 1000)
            
            self.tick.emit({"type": "freq", "phrase": phrase, "i": i, "n": total, "progress": int(i/total*100)})
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≥–ª—É–±—å
            if self.depth_cfg.get("enabled"):
                # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤–≥–ª—É–±—å
                pass
            
            rec["status"] = "OK"
            rows.append(rec)
        
        self.done.emit(rows)

class ParsingTab(QWidget):
    """–ï–¥–∏–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –ü–∞—Ä—Å–∏–Ω–≥ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¢—É—Ä–±–æ/–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å/–í–≥–ª—É–±—å"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –ì–ª–∞–≤–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Horizontal)
        splitter.setChildrenCollapsible(False)
        splitter.setHandleWidth(6)
        
        # ---- LEFT: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ----
        left = QWidget()
        left_layout = QVBoxLayout(left)
        
        # –†–µ–∂–∏–º—ã —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏
        gb_modes = QGroupBox("–†–µ–∂–∏–º—ã —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ (Wordstat)")
        self.c_ws = QCheckBox("WS (–±–∞–∑–æ–≤–∞—è)")
        self.c_ws.setChecked(True)
        self.c_qws = QCheckBox('"WS" (–≤ –∫–∞–≤—ã—á–∫–∞—Ö)')
        self.c_bws = QCheckBox("!WS (—Ç–æ—á–Ω–∞—è)")
        modes_layout = QVBoxLayout(gb_modes)
        modes_layout.addWidget(self.c_ws)
        modes_layout.addWidget(self.c_qws)
        modes_layout.addWidget(self.c_bws)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≥–ª—É–±—å
        gb_depth = QGroupBox("–ü–∞—Ä—Å–∏–Ω–≥ –≤–≥–ª—É–±—å")
        self.ch_depth = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤–≥–ª—É–±—å")
        self.sb_pages = QSpinBox()
        self.sb_pages.setRange(1, 40)
        self.sb_pages.setValue(20)
        self.ch_left = QCheckBox("–õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞")
        self.ch_left.setChecked(True)
        self.ch_right = QCheckBox("–ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞")
        depth_layout = QVBoxLayout(gb_depth)
        depth_layout.addWidget(self.ch_depth)
        depth_layout.addWidget(QLabel("–°—Ç—Ä–∞–Ω–∏—Ü:"))
        depth_layout.addWidget(self.sb_pages)
        depth_layout.addWidget(self.ch_left)
        depth_layout.addWidget(self.ch_right)
        
        # –†–µ–≥–∏–æ–Ω—ã
        gb_geo = QGroupBox("–†–µ–≥–∏–æ–Ω—ã (–¥–µ—Ä–µ–≤–æ)")
        self.geo = GeoTree()
        geo_layout = QVBoxLayout(gb_geo)
        geo_layout.addWidget(self.geo)
        
        # –ê–∫–∫–∞—É–Ω—Ç
        gb_acc = QGroupBox("–ê–∫–∫–∞—É–Ω—Ç / –ø—Ä–æ—Ñ–∏–ª—å")
        self.acc = QComboBox()
        self.acc.addItems(["–¢–µ–∫—É—â–∏–π", "–í—Å–µ –ø–æ –æ—á–µ—Ä–µ–¥–∏"])
        acc_layout = QVBoxLayout(gb_acc)
        acc_layout.addWidget(self.acc)
        
        left_layout.addWidget(gb_modes)
        left_layout.addWidget(gb_depth)
        left_layout.addWidget(gb_geo, 1)
        left_layout.addWidget(gb_acc)
        
        # ---- CENTER: —Ñ—Ä–∞–∑—ã + —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ----
        center = QWidget()
        center_layout = QVBoxLayout(center)
        
        # –í–≤–æ–¥ —Ñ—Ä–∞–∑
        self.phrases_edit = QTextEdit()
        self.phrases_edit.setPlaceholderText("–í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)...")
        self.phrases_edit.setMaximumHeight(150)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        
        # Add button with popup (like Frequency button)
        self.btn_add = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        self.btn_add.clicked.connect(self._open_add_popup)
        buttons.addWidget(self.btn_add)
        
        self.btn_run = QPushButton("‚ñ∂ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–ê–†–°–ò–ù–ì")
        self.btn_stop = QPushButton("‚ñ† –û–°–¢–ê–ù–û–í–ò–¢–¨")
        self.btn_stop.setEnabled(False)
        self.btn_export = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        buttons.addWidget(self.btn_run)
        buttons.addWidget(self.btn_stop)
        buttons.addWidget(self.btn_export)
        buttons.addStretch()
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress = QProgressBar()
        self.progress.setVisible(False)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.table = QTableWidget(0, 7)
        self.table.setHorizontalHeaderLabels(["–§—Ä–∞–∑–∞", "WS", '"WS"', "!WS", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è", "–î–µ–π—Å—Ç–≤–∏—è"])
        self.table.verticalHeader().setVisible(False)
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.setAlternatingRowColors(True)
        
        center_layout.addWidget(QLabel("–ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:"))
        center_layout.addWidget(self.phrases_edit)
        center_layout.addLayout(buttons)
        center_layout.addWidget(self.progress)
        center_layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"))
        center_layout.addWidget(self.table, 1)
        
        # ---- RIGHT: –ø–∞–Ω–µ–ª—å –∫–ª—é—á–µ–π/–≥—Ä—É–ø–ø ----
        self.right_panel = KeysPanel()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        splitter.addWidget(left)
        splitter.addWidget(center)
        splitter.addWidget(self.right_panel)
        splitter.setStretchFactor(0, 0)  # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
        splitter.setStretchFactor(1, 3)  # –¶–µ–Ω—Ç—Ä —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        splitter.setStretchFactor(2, 2)  # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å—Ä–µ–¥–Ω—è—è
        
        layout = QVBoxLayout(self)
        layout.addWidget(splitter, 1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._worker = None
        self.btn_run.clicked.connect(self.on_run)
        self.btn_stop.clicked.connect(self.on_stop)
        self.btn_export.clicked.connect(self.on_export)
    
    def on_run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"""
        phrases = [p.strip() for p in self.phrases_edit.toPlainText().splitlines() if p.strip()]
        if not phrases:
            return
        
        modes = {
            "ws": self.c_ws.isChecked(),
            "qws": self.c_qws.isChecked(),
            "bws": self.c_bws.isChecked()
        }
        
        depth_cfg = {
            "enabled": self.ch_depth.isChecked(),
            "pages": self.sb_pages.value(),
            "left": self.ch_left.isChecked(),
            "right": self.ch_right.isChecked()
        }
        
        geo_ids = self.geo.selected_geo_ids()
        
        # UI
        self.btn_run.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.progress.setVisible(True)
        self.progress.setValue(0)
        self.table.setRowCount(0)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
        self._worker = ParsingWorker(phrases, modes, depth_cfg, geo_ids, self)
        self._worker.tick.connect(self.on_tick)
        self._worker.done.connect(self.on_done)
        self._worker.start()
    
    def on_stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"""
        if self._worker:
            self._worker.stop()
            self._worker = None
        self.btn_run.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.progress.setVisible(False)
    
    def on_tick(self, event):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if event.get("type") == "freq":
            self.progress.setValue(event.get("progress", 0))
    
    def on_done(self, rows):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω"""
        self.btn_run.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.progress.setVisible(False)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.table.setRowCount(0)
        for row in rows:
            i = self.table.rowCount()
            self.table.insertRow(i)
            
            values = [
                row["phrase"],
                str(_to_int0(row.get("ws", 0))),
                str(_to_int0(row.get("qws", 0))),
                str(_to_int0(row.get("bws", 0))),
                row.get("status", ""),
                time.strftime("%H:%M:%S"),
                "‚ûú"  # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            ]
            
            for j, val in enumerate(values):
                item = QTableWidgetItem(str(val))
                # Right align numeric columns
                if j in (1, 2, 3):
                    item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                self.table.setItem(i, j, item)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –≤ –≥—Ä—É–ø–ø—ã
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        from collections import defaultdict
        groups_data = defaultdict(list)
        
        for r in rows:
            phrase = r["phrase"]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É
            first_word = phrase.split()[0] if phrase else "–ü—Ä–æ—á–µ–µ"
            groups_data[first_word].append({
                "phrase": phrase,
                "freq": _to_int0(r.get("ws", 0)),
                "freq_quotes": _to_int0(r.get("qws", 0)),
                "freq_exact": _to_int0(r.get("bws", 0))
            })
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è KeysPanel
        self.right_panel.update_groups(groups_data)
    
    def on_export(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        import csv
        
        filename, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", "", "CSV Files (*.csv)")
        if not filename:
            return
        
        rows = []
        for i in range(self.table.rowCount()):
            row = []
            for j in range(self.table.columnCount() - 1):  # –ë–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                item = self.table.item(i, j)
                value = item.text() if item else ""
                # Convert numeric columns to 0 if empty
                if j in (1, 2, 3):  # WS, "WS", !WS columns
                    value = str(_to_int0(value))
                row.append(value)
            rows.append(row)
        
        with open(filename, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f)
            writer.writerow(["–§—Ä–∞–∑–∞", "WS", '"WS"', "!WS", "–°—Ç–∞—Ç—É—Å", "–í—Ä–µ–º—è"])
            writer.writerows(rows)
    
    def _open_add_popup(self):
        """Open popup panel below Add button"""
        popup = AddActionsPopup(self)
        pos = self.btn_add.mapToGlobal(QPoint(0, self.btn_add.height()))
        popup.move(pos)
        popup.show()
    
    def on_add_phrases_dialog(self):
        """Add phrases via dialog"""
        text, ok = QInputDialog.getMultiLineText(
            self,
            "–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã",
            "–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            self.phrases_edit.toPlainText()
        )
        if ok:
            self.phrases_edit.setPlainText(text)
    
    def on_load_from_file(self):
        """Load phrases from file"""
        filename, _ = QFileDialog.getOpenFileName(
            self,
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞",
            "",
            "Text Files (*.txt);;All Files (*.*)"
        )
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    content = f.read()
                self.phrases_edit.setPlainText(content)
            except Exception as e:
                from PySide6.QtWidgets import QMessageBox
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
    
    def on_import_from_clipboard(self):
        """Import phrases from clipboard"""
        clipboard = QApplication.clipboard()
        text = clipboard.text()
        if text:
            self.phrases_edit.setPlainText(text)
    
    def on_clear_table(self):
        """Clear the results table"""
        from PySide6.QtWidgets import QMessageBox
        reply = QMessageBox.question(
            self,
            "–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?",
            QMessageBox.Yes | QMessageBox.No
        )
        if reply == QMessageBox.Yes:
            self.table.setRowCount(0)
