# -*- coding: utf-8 -*-
from __future__ import annotations

import asyncio
import json
import sys
import time
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Optional, List, Dict, Any, Tuple, Iterable, Sequence

from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QGuiApplication, QTextCursor
from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QSplitter,
    QPushButton,
    QToolButton,
    QTextEdit,
    QLabel,
    QCheckBox,
    QTableWidget,
    QTableWidgetItem,
    QProgressBar,
    QFileDialog,
    QAbstractItemView,
    QMessageBox,
    QMenu,
    QDialog,
    QToolBar,
    QTreeWidget,
    QTreeWidgetItem,
    QSizePolicy,
)

from threading import Event

from ..dialogs.wordstat_settings_dialog import WordstatSettingsDialog
from ..dialogs.wordstat_dropdown_widget import WordstatDropdownWidget
from ..keys_panel import KeysPanel
from ..widgets.activity_log import ActivityLogWidget
from ...core.icons import icon

try:
    from ...services.accounts import list_accounts
except ImportError:
    from services.accounts import list_accounts

try:
    from ...services import multiparser_manager
except ImportError:  # pragma: no cover - fallback for scripts
    try:
        import multiparser_manager  # type: ignore
    except ImportError:
        multiparser_manager = None

# –ò–º–ø–æ—Ä—Ç turbo_parser_10tabs
PACKAGE_ROOT = Path(__file__).resolve().parents[2]
PROJECT_ROOT = Path(__file__).resolve().parents[3]
if str(PACKAGE_ROOT) not in sys.path:
    sys.path.insert(0, str(PACKAGE_ROOT))

BASE_DIR = PROJECT_ROOT
SESSION_FILE = BASE_DIR / "keyset/logs/parsing_session.json"


def _probe_profile_cookies(profile_record: Dict[str, Any]) -> Tuple[int, Optional[str]]:
    """
    Quickly read cookies from the Chrome profile on disk to report how many are available.

    Returns:
        (cookie_count, error_message)
    """
    path_value = profile_record.get("profile_path")
    if not path_value:
        return -1, "–ü—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω"

    try:
        path_obj = Path(path_value)
    except TypeError:
        return -1, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—É—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è: {path_value!r}"

    if multiparser_manager is None:
        return -1, "multiparser_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        
    log_obj = getattr(multiparser_manager, "logger", None)
    if log_obj is None:
        return -1, "–õ–æ–≥–≥–µ—Ä multiparser_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

    try:
        if hasattr(multiparser_manager, '_extract_profile_cookies'):
            cookies = multiparser_manager._extract_profile_cookies(  # type: ignore[attr-defined]
                path_obj,
                log_obj,
            )
        else:
            return -1, "–ú–µ—Ç–æ–¥ _extract_profile_cookies –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
        return -1, str(exc)

    if cookies is None:
        return -1, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫—É–∫–∏"

    return len(cookies), None

try:
    from turbo_parser_improved import turbo_parser_10tabs  # type: ignore
    TURBO_PARSER_AVAILABLE = True
except ImportError as improved_error:  # pragma: no cover - optional dependency
    try:
        from turbo_parser_10tabs import turbo_parser_10tabs  # type: ignore
        TURBO_PARSER_AVAILABLE = True
    except ImportError as e:
        print(f"[WARNING] turbo_parser_10tabs not available: {e}")
        turbo_parser_10tabs = None
        TURBO_PARSER_AVAILABLE = False


class SingleParsingTask:
    """–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    
    def __init__(
        self,
        profile_email: str,
        profile_path: str,
        proxy: str,
        phrases: List[str],
        session_id: str,
        region_plan: Sequence[Tuple[int, str]],
        modes: Sequence[str],
        cookie_count: Optional[int] = None,
    ):
        self.profile_email = profile_email
        self.profile_path = Path(profile_path)
        self.proxy = proxy
        self.phrases = list(phrases)
        self.session_id = session_id
        normalized_plan: List[Tuple[int, str]] = []
        for rid, label in region_plan:
            try:
                region_id = int(rid)
            except (TypeError, ValueError):
                continue
            normalized_plan.append((region_id, str(label)))
        if not normalized_plan:
            normalized_plan = [(225, "–†–æ—Å—Å–∏—è (225)")]
        self.region_plan = normalized_plan
        self.modes = tuple(str(mode) for mode in modes if str(mode))
        self.cookie_count = cookie_count
        self.results: List[Dict[str, Any]] = []
        self.status = "waiting"
        self.progress = 0
        self.logs = []
        
    def log(self, message: str, level: str = "INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_line = f"[{timestamp}] [{level}] [{self.profile_email}] {message}"
        self.logs.append(log_line)
        return log_line
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.status = "running"
        self.results = []
        total_phrases = len(self.phrases)
        self.log(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {total_phrases} —Ñ—Ä–∞–∑", "INFO")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            if not self.profile_path.exists():
                self.log(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.profile_path}", "ERROR")
                self.status = "error"
                return
                
            self.log(f"‚úì –ü—Ä–æ—Ñ–∏–ª—å: {self.profile_path}", "INFO")
            self.log(f"‚úì –ü—Ä–æ–∫—Å–∏: {self.proxy or '–ù–ï–¢'}", "INFO")
            if self.cookie_count is not None:
                self.log(f"‚úì –ö—É–∫–∏ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ): {self.cookie_count} —à—Ç", "INFO")

            active_modes = set(self.modes) if self.modes else {"ws"}
            unsupported_modes = sorted(active_modes - {"ws"})
            if unsupported_modes:
                modes_str = ", ".join(unsupported_modes)
                self.log(
                    f"‚ö†Ô∏è –†–µ–∂–∏–º—ã {modes_str} –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç—É—Ä–±–æ-–ø–∞—Ä—Å–µ—Ä–æ–º –∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã.",
                    "WARNING",
                )

            processed_regions = 0
            ws_enabled = "ws" in active_modes
            for region_id, region_name in self.region_plan:
                self.log(f"üåç –†–µ–≥–∏–æ–Ω: {region_name} ({region_id})", "INFO")
                region_records: List[Dict[str, Any]] = []
                if ws_enabled and total_phrases:
                    try:
                        ws_results = await turbo_parser_10tabs(
                            account_name=self.profile_email,
                            profile_path=self.profile_path,
                            phrases=self.phrases,
                            headless=False,
                            proxy_uri=self.proxy,
                            region_id=region_id,
                        )
                    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
                        self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–≥–∏–æ–Ω–∞ {region_id}: {exc}", "ERROR")
                        continue

                    status_map: Dict[str, str] = {}
                    if hasattr(ws_results, "meta"):
                        status_map = ws_results.meta.get("statuses") or {}

                    for phrase, freq in ws_results.items():
                        raw_status = status_map.get(phrase, "OK")
                        status_key = str(raw_status).strip().upper().replace(" ", "_")
                        status_code = "OK" if status_key == "OK" else "NO_DATA"
                        status_display = "No data" if status_code == "NO_DATA" else "OK"
                        try:
                            freq_value = int(freq)
                        except (TypeError, ValueError):
                            freq_value = 0
                        region_records.append(
                            {
                                "phrase": phrase,
                                "ws": freq_value,
                                "qws": 0,
                                "bws": 0,
                                "status": status_display,
                                "profile": self.profile_email,
                                "region_id": region_id,
                                "region_name": region_name,
                            }
                        )
                else:
                    self.log("‚ö†Ô∏è –†–µ–∂–∏–º WS –æ—Ç–∫–ª—é—á—ë–Ω ‚Äî –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω.", "WARNING")

                self.results.extend(region_records)
                processed_regions += 1
                if processed_regions:
                    completion = int((processed_regions / len(self.region_plan)) * 100)
                    self.progress = min(100, completion)

            self.log(
                f"‚úì –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(self.results)}",
                "SUCCESS",
            )
            self.status = "completed"
            self.progress = 100
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "ERROR")
            self.status = "error"
            self.progress = 0


class MultiParsingWorker(QThread):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    log_signal = Signal(str)  # –û–±—â–∏–π –ª–æ–≥
    profile_log_signal = Signal(str, str)  # –õ–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (email, message)
    progress_signal = Signal(dict)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    task_completed = Signal(str, list)  # –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (email, results)
    all_finished = Signal(list)  # –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    
    def __init__(
        self,
        phrases: List[str],
        modes: Sequence[str],
        regions_map: Dict[int, str] | None,
        geo_ids: List[int],
        selected_profiles: List[dict],  # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        parent: QWidget | None = None,
    ):
        super().__init__(parent)
        self.phrases = list(phrases)
        normalized_modes = []
        for mode in modes:
            mode_name = str(mode).strip()
            if mode_name and mode_name not in normalized_modes:
                normalized_modes.append(mode_name)
        if not normalized_modes:
            normalized_modes = ["ws"]
        self.modes = normalized_modes
        region_items: List[Tuple[int, str]] = []
        if regions_map:
            for rid, label in regions_map.items():
                try:
                    region_id = int(rid)
                except (TypeError, ValueError):
                    continue
                region_items.append((region_id, str(label)))
        if not region_items:
            fallback_ids = geo_ids or [225]
            for rid in fallback_ids:
                try:
                    region_id = int(rid)
                except (TypeError, ValueError):
                    continue
                region_items.append((region_id, f"{region_id}"))
        if not region_items:
            region_items = [(225, "–†–æ—Å—Å–∏—è (225)")]

        self.region_plan = region_items
        self.geo_ids = [rid for rid, _ in self.region_plan]
        self.selected_profiles = selected_profiles
        self._stop_requested = False
        self._paused = False
        self._pause_event = Event()
        self._pause_event.set()
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—Ä–∞–∑—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        num_profiles = len(selected_profiles)
        if num_profiles == 0:
            raise ValueError("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")

        phrases_per_profile = len(self.phrases) // num_profiles
        remainder = len(self.phrases) % num_profiles

        batches = []
        start_idx = 0

        for i in range(num_profiles):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—è–º –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
            end_idx = start_idx + phrases_per_profile + (1 if i >= num_profiles - remainder else 0)
            batch = self.phrases[start_idx:end_idx]
            batches.append(batch)
            start_idx = end_idx

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
        self.tasks = []
        for profile, batch in zip(selected_profiles, batches):
            task = SingleParsingTask(
                profile_email=profile['email'],
                profile_path=profile['profile_path'],
                proxy=profile.get('proxy'),
                phrases=batch,  # ‚úÖ –ö–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–≤–æ–π –±–∞—Ç—á —Ñ—Ä–∞–∑
                session_id=self.session_id,
                region_plan=self.region_plan,
                modes=self.modes,
                cookie_count=profile.get("cookie_count"),
            )
            self.tasks.append(task)
            
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log_file = Path("C:/AI/yandex/keyset/logs/multiparser_journal.log")
        self.log_file.parent.mkdir(parents=True, exist_ok=True)
    
    def stop(self):
        self._stop_requested = True
        self._pause_event.set()
        self._paused = False
        self._write_log("‚õî –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")

    def pause(self):
        if self._stop_requested or self._paused:
            return
        self._paused = True
        self._pause_event.clear()
        self._write_log("‚è∏ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")

    def resume(self):
        if not self._paused:
            return
        self._paused = False
        self._pause_event.set()
        self._write_log("‚ñ∂Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω")

    @property
    def is_paused(self) -> bool:
        return self._paused

    def _write_log(self, message: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GUI"""
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(message + "\n")
        except Exception as e:
            print(f"Log write error: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GUI
        self.log_signal.emit(message)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        self._write_log("=" * 70)
        self._write_log(f"üöÄ –ó–ê–ü–£–°–ö –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        self._write_log(f"üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(self.selected_profiles)}")
        self._write_log(f"üìù –§—Ä–∞–∑: {len(self.phrases)}")
        self._write_log(f"üåç –†–µ–≥–∏–æ–Ω–æ–≤: {len(self.region_plan)}")
        self._write_log(f"‚öôÔ∏è –†–µ–∂–∏–º—ã: {', '.join(self.modes)}")
        self._write_log("=" * 70)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            loop.run_until_complete(self._run_all_parsers())
        finally:
            loop.close()
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results: List[Dict[str, Any]] = []
        for task in self.tasks:
            if task.results:
                all_results.extend(task.results)
                    
        self._write_log("=" * 70)
        self._write_log(f"‚úÖ –í–°–ï –ó–ê–î–ê–ß–ò –ó–ê–í–ï–†–®–ï–ù–´")
        self._write_log(f"üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")
        self._write_log("=" * 70)
        
        self.all_finished.emit(all_results)
    
    async def _run_all_parsers(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        tasks_coro = []
        
        for task in self.tasks:
            if self._stop_requested:
                break

            await self._wait_if_paused()

            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            tasks_coro.append(self._run_single_parser(task))
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks_coro, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                self._write_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {self.tasks[i].profile_email}: {str(result)}")

    async def _wait_if_paused(self):
        if self._pause_event.is_set():
            return
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, self._pause_event.wait)

    async def _run_single_parser(self, task: SingleParsingTask):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        self._write_log(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {task.profile_email}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ª–æ–≥–∏ –∑–∞–¥–∞—á–∏
        def log_callback(msg, level):
            full_msg = task.log(msg, level)
            self._write_log(full_msg)
            self.profile_log_signal.emit(task.profile_email, full_msg)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._wait_if_paused()
        if self._stop_requested:
            self._write_log(f"‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {task.profile_email} –¥–æ –∑–∞–ø—É—Å–∫–∞")
            return {}

        await task.run()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∑–∞–¥–∞—á–∏
        for log_line in task.logs:
            self._write_log(log_line)
            self.profile_log_signal.emit(task.profile_email, log_line)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self.task_completed.emit(task.profile_email, task.results)
        
        return task.results


class ParsingTab(QWidget):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, parent: QWidget | None = None, keys_panel: KeysPanel | None = None, activity_log: ActivityLogWidget | None = None):
        super().__init__(parent)
        self._worker = None
        self._keys_panel = keys_panel
        self.activity_log = activity_log or ActivityLogWidget()
        self._last_settings = self._normalize_wordstat_settings(None)
        self._active_profiles: List[dict] = []
        self._active_phrases: List[str] = []
        self._active_regions: Dict[int, str] = {225: "–†–æ—Å—Å–∏—è (225)"}
        self._region_order: List[int] = []
        self._region_labels: Dict[int, str] = {}
        self._manual_phrases_cache: str = ""
        self._manual_ignore_duplicates: bool = False
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–∞—Å—Ç–æ—Ç–∫–∞"
        self._wordstat_dropdown = None
        
        self.setup_ui()
        self._wire_signals()
        self._restore_session_state()

    def _normalize_wordstat_settings(self, settings: Dict[str, Any] | None) -> Dict[str, Any]:
        """–ü—Ä–∏–≤–µ—Å—Ç–∏ –ª—é–±—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç–∫–∏ –∫ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–º—É –≤–∏–¥—É."""
        allowed_modes = ("ws", "qws", "bws")
        modes_list: List[str] = []
        region_map: Dict[int, str] = {}

        if settings:
            raw_modes = settings.get("modes")
            if isinstance(raw_modes, dict):
                modes_list = [name for name, value in raw_modes.items() if value and name in allowed_modes]
            elif isinstance(raw_modes, (list, tuple, set)):
                modes_list = [str(name) for name in raw_modes if str(name) in allowed_modes]

            if not modes_list:
                for name in allowed_modes:
                    if settings.get(name, False):
                        modes_list.append(name)

            if isinstance(settings.get("regions_map"), dict) and settings["regions_map"]:
                region_map = {int(k): str(v) for k, v in settings["regions_map"].items()}
            elif isinstance(settings.get("region_map"), dict) and settings["region_map"]:
                region_map = {int(k): str(v) for k, v in settings["region_map"].items()}
            else:
                region_ids: List[int] = []
                if isinstance(settings.get("regions"), Iterable):
                    try:
                        region_ids = [int(rid) for rid in settings["regions"]]
                    except (TypeError, ValueError):
                        region_ids = []
                elif settings.get("region"):
                    try:
                        region_ids = [int(settings["region"])]
                    except (TypeError, ValueError):
                        region_ids = []

                if region_ids:
                    labels = list(settings.get("region_names") or [])
                    if labels and len(labels) == len(region_ids):
                        region_map = {rid: str(label) for rid, label in zip(region_ids, labels)}
                    else:
                        region_map = {rid: str(rid) for rid in region_ids}
        else:
            modes_list = ["ws"]

        if not modes_list:
            modes_list = ["ws"]

        if not region_map:
            region_map = {225: "–†–æ—Å—Å–∏—è (225)"}

        bool_modes = {name: (name in modes_list) for name in allowed_modes}

        normalized = {
            "collect_wordstat": bool(settings.get("collect_wordstat", True)) if settings else True,
            "modes": modes_list,
            "regions_map": region_map,
            "regions": list(region_map.keys()),
            "region_names": list(region_map.values()),
            "ws": bool_modes["ws"],
            "qws": bool_modes["qws"],
            "bws": bool_modes["bws"],
            "profiles": list(settings.get("profiles") or []) if settings else [],
            "profile_emails": list(settings.get("profile_emails") or []) if settings else [],
        }
        return normalized

    def _status_column_index(self) -> int:
        return 3 + len(self._region_order)

    @staticmethod
    def _short_region_label(label: str, region_id: int) -> str:
        parts = [part.strip() for part in str(label).split("/") if part.strip()]
        if len(parts) >= 3:
            parts = parts[-3:]
        elif not parts:
            parts = [str(region_id)]
        short = " / ".join(parts)
        return f"{short} ({region_id})"

    def _ensure_item(self, row: int, column: int) -> QTableWidgetItem:
        item = self.table.item(row, column)
        if item is None:
            item = QTableWidgetItem("")
            self.table.setItem(row, column, item)
        return item

    def _set_cell_text(self, row: int, column: int, text: Any) -> None:
        item = self._ensure_item(row, column)
        item.setText("" if text is None else str(text))

    def _set_frequency_cell(
        self,
        row: int,
        column: int,
        value: Any,
        *,
        region_id: int | None = None,
        status: str | None = None,
    ) -> None:
        freq = self._coerce_freq(value)
        item = self._ensure_item(row, column)
        item.setText(str(freq))
        item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
        meta = item.data(Qt.UserRole)
        if not isinstance(meta, dict):
            meta = {}
        if region_id is not None:
            meta["region_id"] = region_id
        if status:
            meta["status"] = status
        meta["value"] = freq
        item.setData(Qt.UserRole, meta)

    def _set_status_cell(self, row: int, text: str, *, status_meta: dict | None = None) -> None:
        column = self._status_column_index()
        item = self._ensure_item(row, column)
        item.setText(text)
        item.setTextAlignment(Qt.AlignCenter)
        if status_meta is not None:
            item.setData(Qt.UserRole, status_meta)

    def _configure_table_columns(self, region_map: Dict[int, str] | None) -> None:
        if not hasattr(self, "table"):
            return

        effective_map = region_map or self._active_regions or {225: "–†–æ—Å—Å–∏—è (225)"}
        ordered_items: List[Tuple[int, str]] = []
        seen: set[int] = set()
        for key, label in effective_map.items():
            try:
                region_id = int(key)
            except (TypeError, ValueError):
                continue
            if region_id in seen:
                continue
            ordered_items.append((region_id, str(label)))
            seen.add(region_id)
        if not ordered_items:
            ordered_items = [(225, "–†–æ—Å—Å–∏—è (225)")]

        self._region_order = [rid for rid, _ in ordered_items]
        self._region_labels = {rid: label for rid, label in ordered_items}

        status_col = self._status_column_index()
        self.table.setColumnCount(status_col + 1)

        headers = ["‚úì", "‚Ññ", "–§—Ä–∞–∑–∞"]
        headers.extend(self._short_region_label(label, rid) for rid, label in ordered_items)
        headers.append("–°—Ç–∞—Ç—É—Å")
        self.table.setHorizontalHeaderLabels(headers)

        self.table.setColumnWidth(0, 36)
        self.table.setColumnWidth(1, 48)
        self.table.setColumnWidth(2, 420)
        for idx in range(len(self._region_order)):
            self.table.setColumnWidth(3 + idx, 160)
        self.table.setColumnWidth(status_col, 100)

        for row in range(self.table.rowCount()):
            self._ensure_checkbox(row)
            self._ensure_item(row, 1)
            self._ensure_item(row, 2)
            for idx in range(len(self._region_order)):
                self._ensure_item(row, 3 + idx)
            self._ensure_item(row, status_col)

    def setup_ui(self) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Å—Ç–∏–ª–µ Key Collector"""
        from PySide6.QtWidgets import (
            QVBoxLayout, QHBoxLayout, QSplitter, 
            QWidget, QPushButton, QMenu
        )
        from PySide6.QtCore import Qt
        
        # ============================================
        # 1. –í–ï–†–•–ù–ò–ô TOOLBAR
        # ============================================
        toolbar = self._create_toolbar()
        
        # ============================================
        # 2. –õ–ï–í–ê–Ø –ß–ê–°–¢–¨ (—Ç–∞–±–ª–∏—Ü–∞ + –∂—É—Ä–Ω–∞–ª)
        # ============================================
        left_widget = QWidget()
        left_layout = QVBoxLayout()
        left_layout.setContentsMargins(5, 5, 5, 5)
        left_layout.setSpacing(5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        control_buttons = QHBoxLayout()
        self.btn_run = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
        self.btn_run.setStyleSheet("QPushButton { font-weight: bold; padding: 8px; }")
        self.btn_stop = QPushButton("‚èπ –°—Ç–æ–ø")
        self.btn_stop.setEnabled(False)
        self.btn_pause = QPushButton("‚è∏ –ü–∞—É–∑–∞")
        self.btn_pause.setEnabled(False)

        control_buttons.addWidget(self.btn_run)
        control_buttons.addWidget(self.btn_pause)
        control_buttons.addWidget(self.btn_stop)
        control_buttons.addStretch()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress = QProgressBar()
        self.progress.setVisible(False)
        control_buttons.addWidget(self.progress)

        left_layout.addLayout(control_buttons)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ñ—Ä–∞–∑
        self.table = QTableWidget()
        self._configure_table_columns(self._active_regions)
        self.table.verticalHeader().setVisible(False)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.NoSelection)
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        left_layout.addWidget(self.table, 1)  # —Ä–∞—Å—Ç—è–∂–∫–∞ = 1 (–∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –º–µ—Å—Ç–æ)
        
        # –ñ—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
        if self.activity_log:
            self.activity_log.setFixedHeight(150)  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            left_layout.addWidget(self.activity_log, 0)  # —Ä–∞—Å—Ç—è–∂–∫–∞ = 0
        
        left_widget.setLayout(left_layout)
        
        # ============================================
        # 3. –ü–†–ê–í–ê–Ø –ß–ê–°–¢–¨ (–¢–û–õ–¨–ö–û –≥—Ä—É–ø–ø—ã)
        # ============================================
        right_widget = self._create_groups_panel()
        
        # ============================================
        # 4. SPLITTER (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
        # ============================================
        splitter = QSplitter(Qt.Horizontal)
        splitter.addWidget(left_widget)   # –ª–µ–≤–∞—è —á–∞—Å—Ç—å
        splitter.addWidget(right_widget)  # –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: 75% / 25%
        splitter.setSizes([750, 250])
        splitter.setStretchFactor(0, 3)  # –ª–µ–≤–∞—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ
        splitter.setStretchFactor(1, 1)
        
        # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        splitter.setCollapsible(0, False)
        splitter.setCollapsible(1, True)  # –ø—Ä–∞–≤—É—é –º–æ–∂–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç—å
        
        # ============================================
        # 5. –ì–õ–ê–í–ù–´–ô LAYOUT
        # ============================================
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        main_layout.addWidget(toolbar, 0)    # toolbar —Å–≤–µ—Ä—Ö—É
        main_layout.addWidget(splitter, 1)   # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        
        self.setLayout(main_layout)
        
    def _create_toolbar(self) -> QToolBar:
        """–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω–∏–π toolbar"""
        toolbar = QToolBar("–ü–∞—Ä—Å–∏–Ω–≥")
        toolbar.setMovable(False)
        toolbar.setFloatable(False)
        toolbar.setContentsMargins(0, 0, 0, 0)

        # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.btn_add = QToolButton()
        self.btn_add.setText("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.btn_add.setPopupMode(QToolButton.InstantPopup)
        self.btn_add.setToolButtonStyle(Qt.ToolButtonTextOnly)
        self._add_menu = QMenu(self.btn_add)
        self._action_add_phrases = self._add_menu.addAction("–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã‚Ä¶")
        self._action_add_from_file = self._add_menu.addAction("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞‚Ä¶")
        self._action_add_from_clipboard = self._add_menu.addAction("–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞‚Ä¶")
        self._add_menu.addSeparator()
        self._action_clear_phrases = self._add_menu.addAction("–û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
        self.btn_add.setMenu(self._add_menu)

        self.btn_delete = QToolButton()
        self.btn_delete.setText("‚ùå –£–¥–∞–ª–∏—Ç—å")
        self.btn_delete.setToolButtonStyle(Qt.ToolButtonTextOnly)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é "–í—ã–¥–µ–ª–µ–Ω–∏–µ"
        self.btn_selection = QToolButton()
        self.btn_selection.setText("–í—ã–¥–µ–ª–µ–Ω–∏–µ")
        self.btn_selection.setPopupMode(QToolButton.InstantPopup)
        self.btn_selection.setToolButtonStyle(Qt.ToolButtonTextOnly)
        self._selection_menu = QMenu(self.btn_selection)
        self._action_select_all = self._selection_menu.addAction(
            "‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            self.select_all,
            "Ctrl+A",
        )
        self._action_deselect_all = self._selection_menu.addAction(
            "‚úó –°–Ω—è—Ç—å –≤—ã–±–æ—Ä",
            self.deselect_all,
        )
        self._action_invert_selection = self._selection_menu.addAction(
            "‚ü≤ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            self.invert_selection,
        )
        self._selection_menu.addSeparator()
        self._action_select_by_filter = self._selection_menu.addAction(
            "üîç –í—ã–¥–µ–ª–∏—Ç—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É...",
            self.select_by_filter,
        )
        self.btn_selection.setMenu(self._selection_menu)

        self.btn_ws = QToolButton()
        self.btn_ws.setText("–ß–∞—Å—Ç–æ—Ç–∫–∞")
        self.btn_ws.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        self.btn_batch = QToolButton()
        self.btn_batch.setText("–ü–∞–∫–µ—Ç")
        self.btn_batch.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        self.btn_forecast = QToolButton()
        self.btn_forecast.setText("–ü—Ä–æ–≥–Ω–æ–∑")
        self.btn_forecast.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)

        self.btn_clear = QToolButton()
        self.btn_clear.setText("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_clear.setToolButtonStyle(Qt.ToolButtonTextOnly)

        self.btn_export = QToolButton()
        self.btn_export.setText("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        self.btn_export.setToolButtonStyle(Qt.ToolButtonTextOnly)

        toolbar.addWidget(self.btn_add)
        toolbar.addWidget(self.btn_delete)
        toolbar.addSeparator()
        toolbar.addWidget(self.btn_selection)
        toolbar.addSeparator()
        toolbar.addWidget(self.btn_ws)
        toolbar.addWidget(self.btn_batch)
        toolbar.addWidget(self.btn_forecast)
        toolbar.addSeparator()
        toolbar.addWidget(self.btn_clear)
        toolbar.addWidget(self.btn_export)

        spacer = QWidget()
        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        toolbar.addWidget(spacer)

        self.status_label = QLabel("üü¢ –ì–æ—Ç–æ–≤–æ")
        self.status_label.setStyleSheet("QLabel { font-weight: bold; padding: 5px; }")
        toolbar.addWidget(self.status_label)

        return toolbar
    
    def _create_groups_panel(self) -> QWidget:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ (–ï–î–ò–ù–°–¢–í–ï–ù–ù–£–Æ)"""
        widget = QWidget()
        layout = QVBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)
        layout.setSpacing(5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
        title.setStyleSheet("""
            QLabel {
                font-weight: bold;
                font-size: 13px;
                padding: 5px;
                background-color: #f0f0f0;
                border: 1px solid #ccc;
                border-radius: 3px;
            }
        """)
        layout.addWidget(title)
        
        # –ú–∏–Ω–∏-—Ç—É–ª–±–∞—Ä –¥–ª—è –≥—Ä—É–ø–ø
        toolbar_layout = QHBoxLayout()
        
        self.btn_add_group = QPushButton("+")
        self.btn_add_group.setToolTip("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
        self.btn_add_group.setFixedSize(35, 35)
        self.btn_add_group.setStyleSheet("""
            QPushButton {
                font-size: 18px;
                font-weight: bold;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
        """)
        self.btn_add_group.clicked.connect(self._on_create_group)
        
        self.btn_delete_group = QPushButton("-")
        self.btn_delete_group.setToolTip("–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
        self.btn_delete_group.setFixedSize(35, 35)
        self.btn_delete_group.setStyleSheet("""
            QPushButton {
                font-size: 18px;
                font-weight: bold;
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:pressed {
                background-color: #c41005;
            }
        """)
        self.btn_delete_group.clicked.connect(self._on_delete_group)
        
        self.btn_sort_group = QPushButton("S")
        self.btn_sort_group.setToolTip("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã")
        self.btn_sort_group.setFixedSize(35, 35)
        self.btn_sort_group.setStyleSheet("""
            QPushButton {
                font-size: 14px;
                font-weight: bold;
                background-color: #2196F3;
                color: white;
                border: none;
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #0b7dda;
            }
            QPushButton:pressed {
                background-color: #0960a8;
            }
        """)
        self.btn_sort_group.clicked.connect(self._on_sort_groups)
        
        toolbar_layout.addWidget(self.btn_add_group)
        toolbar_layout.addWidget(self.btn_delete_group)
        toolbar_layout.addWidget(self.btn_sort_group)
        toolbar_layout.addStretch()
        
        layout.addLayout(toolbar_layout)
        
        # –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø
        self.groups_tree = QTreeWidget()
        self.groups_tree.setHeaderLabel("–ì—Ä—É–ø–ø–∞ / –§—Ä–∞–∑–∞")
        self.groups_tree.setMaximumWidth(350)
        self.groups_tree.setStyleSheet("""
            QTreeWidget {
                border: 1px solid #ccc;
                background-color: white;
                border-radius: 3px;
            }
            QTreeWidget::item {
                padding: 5px;
            }
            QTreeWidget::item:selected {
                background-color: #4CAF50;
                color: white;
            }
            QTreeWidget::item:hover {
                background-color: #e8f5e9;
            }
        """)
        self.groups_tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.groups_tree.customContextMenuRequested.connect(self._on_groups_context_menu)
        self.groups_tree.itemClicked.connect(self._on_group_selected)
        self.groups_tree.itemDoubleClicked.connect(self._on_group_double_clicked)
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã
        self._init_groups_tree()
        
        layout.addWidget(self.groups_tree, 1)
        
        widget.setLayout(layout)
        widget.setMaximumWidth(400)  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–∞–Ω–µ–ª–∏
        return widget
    
    def _wire_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # TOP PANEL –∫–Ω–æ–ø–∫–∏
        self._action_add_phrases.triggered.connect(self._show_add_phrases_dialog)
        self._action_add_from_file.triggered.connect(self._on_add_from_file)
        self._action_add_from_clipboard.triggered.connect(self._on_add_from_clipboard)
        self._action_clear_phrases.triggered.connect(self._on_clear_results)
        self.btn_delete.clicked.connect(self._on_delete_phrases)
        self.btn_ws.clicked.connect(self._on_wordstat_dropdown)
        self.btn_batch.clicked.connect(self._on_batch_parsing)
        self.btn_forecast.clicked.connect(self._on_forecast)
        self.btn_clear.clicked.connect(self._on_clear_results)
        self.btn_export.clicked.connect(self._on_export_clicked)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.btn_ws.setIcon(icon("frequency"))
        self.btn_batch.setIcon(icon("batch"))
        self.btn_forecast.setIcon(icon("forecast"))

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        self.btn_run.clicked.connect(self._on_wordstat_dropdown)
        self.btn_stop.clicked.connect(self._on_stop_parsing)
        self.btn_pause.clicked.connect(self._on_pause_parsing)
    
    def _on_group_selected(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
        group_name = item.text(column)
        self._append_log(f"–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")

    def _get_selected_profiles(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –ë–î (–≤–∫–ª–∞–¥–∫–∞ –ê–∫–∫–∞—É–Ω—Ç—ã)"""
        selected = []
        try:
            accounts = list_accounts()
            self._append_log(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ –ë–î: {len(accounts)}")

            skipped = 0
            for account in accounts:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                if account.name in ["demo_account", "wordstat_main"]:
                    self._append_log(f"   ‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω —Å–ª—É–∂–µ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {account.name}")
                    skipped += 1
                    continue

                raw_profile_path = getattr(account, "profile_path", "") or ""
                if not raw_profile_path:
                    self._append_log(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {account.name}: –Ω–µ—Ç profile_path")
                    skipped += 1
                    continue

                profile_path = Path(raw_profile_path)
                if not profile_path.is_absolute():
                    profile_path = (BASE_DIR / profile_path).resolve()
                else:
                    profile_path = profile_path.resolve()

                proxy_value = getattr(account, "proxy", None)

                profile_data = {
                    'email': account.name,
                    'proxy': proxy_value.strip() if isinstance(proxy_value, str) else proxy_value,
                    'profile_path': str(profile_path),
                }

                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                self._append_log(f"   ‚úì {account.name} ‚Üí {str(profile_path)}")
                selected.append(profile_data)

            self._append_log(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(selected)}")
            if skipped > 0:
                self._append_log(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {skipped}")

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}"
            self._append_log(error_msg)
            import traceback
            self._append_log(traceback.format_exc())

        return selected

    def _insert_phrase_row(self, phrase: str, ws: str = "", status: str = "‚Äî", checked: bool = True) -> None:
        self._configure_table_columns(self._active_regions)
        row_idx = self.table.rowCount()
        self.table.insertRow(row_idx)

        checkbox = QCheckBox()
        checkbox.setChecked(checked)
        checkbox_container = QWidget()
        checkbox_layout = QHBoxLayout(checkbox_container)
        checkbox_layout.setContentsMargins(0, 0, 0, 0)
        checkbox_layout.setAlignment(Qt.AlignCenter)
        checkbox_layout.addWidget(checkbox)
        self.table.setCellWidget(row_idx, 0, checkbox_container)

        self._set_cell_text(row_idx, 1, row_idx + 1)
        self._set_cell_text(row_idx, 2, phrase)
        for idx in range(len(self._region_order)):
            self._set_cell_text(row_idx, 3 + idx, ws if idx == 0 else "")
        self._set_cell_text(row_idx, self._status_column_index(), status)

    def _renumber_rows(self) -> None:
        for row in range(self.table.rowCount()):
            self._set_cell_text(row, 1, row + 1)

    def _get_checkbox(self, row: int) -> QCheckBox | None:
        widget = self.table.cellWidget(row, 0)
        if isinstance(widget, QCheckBox):
            return widget
        if widget:
            checkbox = widget.findChild(QCheckBox)
            if isinstance(checkbox, QCheckBox):
                return checkbox
        return None

    def _ensure_checkbox(self, row: int, checked: bool | None = None) -> QCheckBox | None:
        checkbox = self._get_checkbox(row)
        if checkbox is None:
            checkbox = QCheckBox()
            container = QWidget()
            layout = QHBoxLayout(container)
            layout.setContentsMargins(0, 0, 0, 0)
            layout.setAlignment(Qt.AlignCenter)
            layout.addWidget(checkbox)
            self.table.setCellWidget(row, 0, container)
        if checked is not None and checkbox is not None:
            checkbox.setChecked(checked)
        return checkbox

    def _get_all_phrases(self) -> List[str]:
        phrases: List[str] = []
        for row in range(self.table.rowCount()):
            phrase_item = self.table.item(row, 2)
            if phrase_item:
                phrase = phrase_item.text().strip()
                if phrase:
                    phrases.append(phrase)
        return phrases

    def _get_selected_phrases(self) -> List[str]:
        selected: List[str] = []
        for row in range(self.table.rowCount()):
            checkbox = self._get_checkbox(row)
            if not checkbox or not checkbox.isChecked():
                continue
            phrase_item = self.table.item(row, 2)
            if phrase_item:
                phrase = phrase_item.text().strip()
                if phrase:
                    selected.append(phrase)
        return selected

    def _mark_phrases_pending(self, phrases: List[str]) -> None:
        pending = set(phrases)
        for row in range(self.table.rowCount()):
            phrase_item = self.table.item(row, 2)
            if not phrase_item:
                continue
            if phrase_item.text().strip() in pending:
                for idx in range(len(self._region_order)):
                    self._set_cell_text(row, 3 + idx, "")
                self._set_cell_text(row, self._status_column_index(), "‚è≥")

    def save_session_state(self, partial_results: List[Dict[str, Any]] | None = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ."""
        try:
            SESSION_FILE.parent.mkdir(parents=True, exist_ok=True)
        except Exception as exc:  # pragma: no cover - best effort
            print(f"[ERROR] Failed to prepare session directory: {exc}")
            return

        phrases = self._get_all_phrases()
        state: Dict[str, Any] = {
            "timestamp": datetime.now().isoformat(),
            "phrases": phrases,
            "settings": self._last_settings,
            "manual_buffer": self._manual_phrases_cache,
        }
        if partial_results is not None:
            state["partial_results"] = partial_results

        try:
            with SESSION_FILE.open("w", encoding="utf-8") as fh:
                json.dump(state, fh, ensure_ascii=False, indent=2)
        except Exception as exc:
            print(f"[ERROR] Failed to save session: {exc}")

    def load_session_state(self) -> Dict[str, Any] | None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ."""
        if not SESSION_FILE.exists():
            return None
        try:
            with SESSION_FILE.open("r", encoding="utf-8") as fh:
                return json.load(fh)
        except Exception as exc:
            print(f"[ERROR] Failed to load session: {exc}")
            return None

    def _restore_session_state(self) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        state = self.load_session_state()
        if not state:
            return

        phrases = state.get("phrases") or []
        if phrases:
            self.table.setRowCount(0)
            for phrase in phrases:
                self._insert_phrase_row(phrase, checked=False)
            self._renumber_rows()
            self._manual_phrases_cache = "\n".join(phrases)
        else:
            self._manual_phrases_cache = ""

        buffer_text = state.get("manual_buffer")
        if isinstance(buffer_text, str):
            self._manual_phrases_cache = buffer_text

        partial_results = state.get("partial_results") or []
        if isinstance(partial_results, list):
            self._populate_results(partial_results)

        settings = state.get("settings")
        if isinstance(settings, dict):
            self._last_settings = self._normalize_wordstat_settings(settings)

    @staticmethod
    def _coerce_freq(value: Any) -> int:
        if value is None:
            return 0
        if isinstance(value, bool):
            return int(value)
        if isinstance(value, (int, float)):
            return int(value)
        if isinstance(value, str):
            stripped = value.strip().replace(" ", "")
            if not stripped:
                return 0
            try:
                return int(float(stripped))
            except ValueError:
                return 0
        return 0

    def _aggregate_by_phrase(self, rows: List[Dict[str, Any]]) -> Dict[str, Dict[str, int]]:
        aggregated: Dict[str, Dict[str, int]] = {}
        for record in rows:
            phrase = str(record.get("phrase", "")).strip()
            if not phrase:
                continue
            entry = aggregated.setdefault(phrase, {"ws": 0, "qws": 0, "bws": 0})
            entry["ws"] = max(entry["ws"], self._coerce_freq(record.get("ws")))
            entry["qws"] = max(entry["qws"], self._coerce_freq(record.get("qws")))
            entry["bws"] = max(entry["bws"], self._coerce_freq(record.get("bws")))
        return aggregated

    def _populate_results(self, rows: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ (–∑–∞–ø–æ–ª–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å)."""
        normalized_rows: List[Dict[str, Any]] = []
        combined_regions = dict(self._active_regions)
        phrase_region_values: Dict[str, Dict[int, int]] = {}
        phrase_statuses: Dict[str, Dict[int, str]] = {}

        for record in rows:
            phrase = str(record.get("phrase", "")).strip()
            if not phrase:
                continue
            region_id_raw = record.get("region_id")
            try:
                region_id = int(region_id_raw) if region_id_raw is not None else 225
            except (TypeError, ValueError):
                region_id = 225
            region_name = str(
                record.get("region_name")
                or combined_regions.get(region_id)
                or record.get("region_label")
                or region_id
            )
            combined_regions.setdefault(region_id, region_name)
            freq_value = self._coerce_freq(record.get("ws"))
            status_raw = str(record.get("status", "OK") or "OK").strip().upper().replace(" ", "_")
            if status_raw in {"FAILED", "ERROR"}:
                status_raw = "NO_DATA"
            if status_raw != "NO_DATA" and status_raw != "OK":
                status_raw = "NO_DATA"

            phrase_region_values.setdefault(phrase, {})[region_id] = freq_value
            phrase_statuses.setdefault(phrase, {})[region_id] = status_raw

        self._configure_table_columns(combined_regions)
        self._active_regions = dict(combined_regions)

        for row in range(self.table.rowCount()):
            self._ensure_checkbox(row)
            phrase_item = self.table.item(row, 2)
            if not phrase_item:
                continue
            phrase = phrase_item.text()
            region_values = phrase_region_values.get(phrase, {})
            region_status_map = phrase_statuses.get(phrase, {})

            if not region_values and not region_status_map:
                self._set_status_cell(row, "‚è±")
                continue

            has_alert = False
            status_meta: Dict[int, str] = {}
            for idx, region_id in enumerate(self._region_order):
                status = region_status_map.get(region_id)
                if status is None:
                    status = "NO_DATA" if phrase in phrase_region_values else "OK"
                status = str(status).strip().upper().replace(" ", "_")
                if status in {"FAILED", "ERROR"}:
                    status = "NO_DATA"
                freq_value = region_values.get(region_id, 0)
                if status == "NO_DATA":
                    has_alert = True
                self._set_frequency_cell(row, 3 + idx, freq_value, region_id=region_id, status=status)
                status_meta[region_id] = status

            status_text = "‚ö†Ô∏è" if has_alert else "‚úì"
            self._set_status_cell(row, status_text, status_meta=status_meta)

        for phrase, regions in phrase_region_values.items():
            status_map = phrase_statuses.get(phrase) or {}
            region_ids = set(regions.keys()) | set(status_map.keys())
            for region_id in region_ids:
                freq_value = self._coerce_freq(regions.get(region_id, 0))
                status_value = str(status_map.get(region_id, "OK")).strip().upper().replace(" ", "_")
                if status_value in {"FAILED", "ERROR"}:
                    status_value = "NO_DATA"
                status_display = "No data" if status_value == "NO_DATA" else "OK"
                normalized_rows.append(
                    {
                        "phrase": phrase,
                        "region_id": region_id,
                        "region_name": self._region_labels.get(region_id, str(region_id)),
                        "ws": freq_value,
                        "status": status_display,
                    }
                )

        self._append_log(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(normalized_rows)}")

        if self._keys_panel:
            groups = defaultdict(list)
            aggregated = self._aggregate_by_phrase(normalized_rows)
            for phrase, metrics in aggregated.items():
                group_name = phrase.split()[0] if phrase else "–ü—Ä–æ—á–µ–µ"
                groups[group_name].append(
                    {
                        "phrase": phrase,
                        "freq_total": metrics["ws"],
                        "freq_quotes": metrics["qws"],
                        "freq_exact": metrics["bws"],
                    }
                )
            self._keys_panel.load_groups(groups)

        return normalized_rows

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–æ–∫ (–º–µ–Ω—é "–í—ã–¥–µ–ª–µ–Ω–∏–µ")
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _select_all_rows(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        for row in range(self.table.rowCount()):
            self._ensure_checkbox(row, True)
        self._append_log(f"‚úì –û—Ç–º–µ—á–µ–Ω–æ —Ñ—Ä–∞–∑: {self.table.rowCount()}")

    def select_all(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)"""
        self._select_all_rows()

    def _deselect_all_rows(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫"""
        for row in range(self.table.rowCount()):
            self._ensure_checkbox(row, False)
        self._append_log("‚úó –í—Å–µ –æ—Ç–º–µ—Ç–∫–∏ —Å–Ω—è—Ç—ã")

    def deselect_all(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)"""
        self._deselect_all_rows()

    def _invert_selection(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫"""
        for row in range(self.table.rowCount()):
            checkbox = self._get_checkbox(row)
            if checkbox:
                checkbox.setChecked(not checkbox.isChecked())
        selected = len(self._get_selected_phrases())
        self._append_log(f"üîÑ –û—Ç–º–µ—Ç–∫–∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã ({selected} —Å—Ç—Ä–æ–∫)")

    def invert_selection(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫ (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)"""
        self._invert_selection()

    def _select_by_filter(self):
        """–í—ã–¥–µ–ª–∏—Ç—å —Ñ—Ä–∞–∑—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        from PySide6.QtWidgets import QInputDialog
        
        filter_text, ok = QInputDialog.getText(
            self,
            "–§–∏–ª—å—Ç—Ä –≤—ã–¥–µ–ª–µ–Ω–∏—è",
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ—Ä–∞–∑–∞—Ö:"
        )
        
        if not ok or not filter_text.strip():
            return
        
        filter_text = filter_text.strip().lower()
        count = 0
        
        for row in range(self.table.rowCount()):
            phrase_item = self.table.item(row, 2)
            if phrase_item and filter_text in phrase_item.text().lower():
                checkbox = self._get_checkbox(row)
                if checkbox:
                    checkbox.setChecked(True)
                    count += 1
        
        self._append_log(f"üîç –ù–∞–π–¥–µ–Ω–æ –∏ –≤—ã–±—Ä–∞–Ω–æ {count} —Ñ—Ä–∞–∑ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É '{filter_text}'")

    def select_by_filter(self):
        """–í—ã–¥–µ–ª–∏—Ç—å —Ñ—Ä–∞–∑—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä—É (–ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥)"""
        self._select_by_filter()

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ (–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _init_groups_tree(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –≥—Ä—É–ø–ø —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            return
        self.groups_tree.clear()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not hasattr(self, 'groups_data'):
            self.groups_data = [
                {
                    "id": 1,
                    "name": "–ì—Ä—É–ø–ø–∞ 1",
                    "children": [
                        {"id": 11, "name": "–ü–æ–¥–≥—Ä—É–ø–ø–∞ –ê"},
                        {"id": 12, "name": "–ü–æ–¥–≥—Ä—É–ø–ø–∞ –ë"}
                    ]
                },
                {"id": 2, "name": "–ì—Ä—É–ø–ø–∞ 2", "children": []},
                {"id": 3, "name": "–ì—Ä—É–ø–ø–∞ 3", "children": []},
            ]
        
        self._load_groups()

    def _load_groups(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            return
            
        self.groups_tree.clear()
        
        if not hasattr(self, 'groups_data'):
            self.groups_data = []
        
        for group_data in self.groups_data:
            parent = QTreeWidgetItem([group_data["name"]])
            parent.setData(0, Qt.UserRole, group_data["id"])
            parent.setCheckState(0, Qt.Unchecked)
            self.groups_tree.addTopLevelItem(parent)
            
            for child_data in group_data.get("children", []):
                child = QTreeWidgetItem([child_data["name"]])
                child.setData(0, Qt.UserRole, child_data["id"])
                child.setCheckState(0, Qt.Unchecked)
                parent.addChild(child)
        
        self.groups_tree.expandAll()

    def _save_groups(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä—É–ø–ø –≤ –¥–∞–Ω–Ω—ã–µ"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            return
            
        self.groups_data = []
        
        for i in range(self.groups_tree.topLevelItemCount()):
            parent_item = self.groups_tree.topLevelItem(i)
            
            group = {
                "id": parent_item.data(0, Qt.UserRole),
                "name": parent_item.text(0),
                "children": []
            }
            
            for j in range(parent_item.childCount()):
                child_item = parent_item.child(j)
                group["children"].append({
                    "id": child_item.data(0, Qt.UserRole),
                    "name": child_item.text(0)
                })
            
            self.groups_data.append(group)

    def _get_next_group_id(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        if not hasattr(self, 'groups_data'):
            return 1
            
        max_id = 0
        for group in self.groups_data:
            if group["id"] > max_id:
                max_id = group["id"]
            for child in group.get("children", []):
                if child["id"] > max_id:
                    max_id = child["id"]
        return max_id + 1

    def _on_create_group(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
        from PySide6.QtWidgets import QInputDialog
        
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            self._append_log("‚ùå –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        name, ok = QInputDialog.getText(
            self,
            "–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:"
        )
        
        if not ok or not name.strip():
            return
        
        selected_items = self.groups_tree.selectedItems()
        parent_item = selected_items[0] if selected_items else None
        
        new_item = QTreeWidgetItem([name.strip()])
        new_group_id = self._get_next_group_id()
        new_item.setData(0, Qt.UserRole, new_group_id)
        new_item.setCheckState(0, Qt.Unchecked)
        
        if parent_item:
            parent_item.addChild(new_item)
            parent_item.setExpanded(True)
        else:
            self.groups_tree.addTopLevelItem(new_item)
        
        self._save_groups()
        self._append_log(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {name.strip()}")
        
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ì—Ä—É–ø–ø–∞ '{name.strip()}' —Å–æ–∑–¥–∞–Ω–∞!")

    def _on_delete_group(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            self._append_log("‚ùå –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
            
        selected_items = self.groups_tree.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
            return
        
        item = selected_items[0]
        name = item.text(0)
        
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{name}'?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.No:
            return
        
        parent = item.parent()
        if parent:
            parent.removeChild(item)
        else:
            index = self.groups_tree.indexOfTopLevelItem(item)
            self.groups_tree.takeTopLevelItem(index)
        
        self._save_groups()
        self._append_log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {name}")

    def _on_rename_group(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            self._append_log("‚ùå –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
            
        from PySide6.QtWidgets import QInputDialog
        
        selected_items = self.groups_tree.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è!")
            return
        
        item = selected_items[0]
        old_name = item.text(0)
        
        new_name, ok = QInputDialog.getText(
            self,
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
            "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            text=old_name
        )
        
        if ok and new_name.strip() and new_name != old_name:
            item.setText(0, new_name.strip())
            self._save_groups()
            self._append_log(f"‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: '{old_name}' ‚Üí '{new_name.strip()}'")

    def _on_sort_groups(self):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            return
        self.groups_tree.sortItems(0, Qt.AscendingOrder)
        self._save_groups()
        self._append_log("üìã –ì—Ä—É–ø–ø—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    def _on_group_double_clicked(self, item, column):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –∫–ª–∏–∫–µ"""
        if not item:
            return
        self._on_rename_group()

    def _on_groups_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ –≥—Ä—É–ø–ø"""
        if not hasattr(self, "groups_tree") or self.groups_tree is None:
            return
            
        menu = QMenu()
        
        selected_items = self.groups_tree.selectedItems()
        
        action_create = menu.addAction("‚ûï –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
        action_create.triggered.connect(self._on_create_group)
        
        if selected_items:
            action_rename = menu.addAction("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
            action_rename.triggered.connect(self._on_rename_group)
            
            action_delete = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
            action_delete.triggered.connect(self._on_delete_group)
            
            menu.addSeparator()
            
            action_move_to_group = menu.addAction("üìÇ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ –≥—Ä—É–ø–ø—É")
            action_move_to_group.triggered.connect(lambda: self._move_phrases_to_group(selected_items[0]))
        
        menu.exec_(self.groups_tree.viewport().mapToGlobal(position))

    def _move_phrases_to_group(self, group_item):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –≤ –≥—Ä—É–ø–ø—É"""
        if not group_item:
            return
            
        group_name = group_item.text(0)
        group_id = group_item.data(0, Qt.UserRole)
        
        selected_rows = []
        for row in range(self.table.rowCount()):
            checkbox = self._get_checkbox(row)
            if checkbox and checkbox.isChecked():
                phrase_item = self.table.item(row, 2)
                if phrase_item:
                    phrase = phrase_item.text()
                    selected_rows.append((row, phrase))
        
        if not selected_rows:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è!")
            return
        
        self._append_log(f"üìÇ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(selected_rows)} —Ñ—Ä–∞–∑ –≤ –≥—Ä—É–ø–ø—É '{group_name}'")
        QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(selected_rows)} —Ñ—Ä–∞–∑")

    def _move_group_up(self):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø—É –≤–≤–µ—Ä—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        self._append_log("‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–≤–µ—Ä—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    def _move_group_down(self):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø—É –≤–Ω–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self._append_log("‚ÑπÔ∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–Ω–∏–∑ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –§—É–Ω–∫—Ü–∏–∏ TOP PANEL (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _show_add_phrases_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑ –≤ —Å—Ç–∏–ª–µ Key Collector."""
        dialog = QDialog(self)
        dialog.setWindowTitle("–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑")
        dialog.setMinimumWidth(520)

        layout = QVBoxLayout(dialog)
        layout.setContentsMargins(12, 12, 12, 12)
        layout.setSpacing(8)

        hint_label = QLabel("–ö–∞–∂–¥—É—é –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")
        layout.addWidget(hint_label)

        ignore_checkbox = QCheckBox("–ù–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–∏–µ–º —Ñ—Ä–∞–∑—ã –≤ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø–∞—Ö")
        ignore_checkbox.setChecked(self._manual_ignore_duplicates)
        layout.addWidget(ignore_checkbox)

        edit = QTextEdit(dialog)
        edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")
        edit.setFixedHeight(320)
        if self._manual_phrases_cache:
            edit.setPlainText(self._manual_phrases_cache)
        layout.addWidget(edit, 1)

        buttons = QHBoxLayout()
        buttons.setSpacing(8)
        buttons.addStretch()

        btn_add = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É", dialog)
        btn_add.setDefault(True)
        btn_load = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞‚Ä¶", dialog)
        btn_clear = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏", dialog)
        btn_close = QPushButton("–ó–∞–∫—Ä—ã—Ç—å", dialog)

        buttons.addWidget(btn_add)
        buttons.addWidget(btn_load)
        buttons.addWidget(btn_clear)
        buttons.addWidget(btn_close)
        layout.addLayout(buttons)

        def _apply_add():
            text = edit.toPlainText().strip()
            phrases = self._extract_phrases_from_text(text)
            if not phrases:
                self._append_log("‚ùå –ù–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return
            self._manual_ignore_duplicates = ignore_checkbox.isChecked()
            self._manual_phrases_cache = ""
            added = self._add_phrases_to_table(phrases, source="—Ñ—Ä–∞–∑", checked=True)
            if added:
                dialog.accept()

        def _apply_load():
            file_path, _ = QFileDialog.getOpenFileName(
                dialog,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏",
                "",
                "Text files (*.txt);;All files (*)",
            )
            if not file_path:
                return
            path = Path(file_path)
            try:
                phrases = self._read_phrases_from_file(path)
            except IOError as exc:
                QMessageBox.warning(
                    dialog,
                    "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{path}\n\n{exc}",
                )
                self._append_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏: {exc}")
                return

            if not phrases:
                QMessageBox.information(
                    dialog,
                    "–ò–º–ø–æ—Ä—Ç —Ñ—Ä–∞–∑",
                    "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–∑.",
                )
                self._append_log("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return

            existing = edit.toPlainText().strip()
            new_text = "\n".join(phrases)
            if existing:
                edit.setPlainText(f"{existing}\n{new_text}")
            else:
                edit.setPlainText(new_text)
            edit.moveCursor(QTextCursor.End)
            self._manual_phrases_cache = edit.toPlainText()
            self._append_log(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞: {path.name} ({len(phrases)})")

        def _apply_clear():
            edit.clear()
            self._manual_phrases_cache = ""
            self._append_log("üßπ –ë—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑ –æ—á–∏—â–µ–Ω")

        btn_add.clicked.connect(_apply_add)
        btn_load.clicked.connect(_apply_load)
        btn_clear.clicked.connect(_apply_clear)
        btn_close.clicked.connect(dialog.reject)

        result = dialog.exec()
        if result != QDialog.Accepted:
            self._manual_phrases_cache = edit.toPlainText()
            self._manual_ignore_duplicates = ignore_checkbox.isChecked()

    @staticmethod
    def _extract_phrases_from_text(text: str) -> List[str]:
        normalized: List[str] = []
        if not text:
            return normalized
        prepared = text.replace("\r\n", "\n").replace("\r", "\n")
        for line in prepared.split("\n"):
            phrase = line.strip()
            if phrase:
                normalized.append(phrase)
        return normalized

    def _read_phrases_from_file(self, path: Path) -> List[str]:
        """–ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8 –∏–ª–∏ CP1251."""
        try:
            try:
                text = path.read_text(encoding="utf-8")
            except UnicodeDecodeError:
                text = path.read_text(encoding="cp1251")
        except Exception as exc:
            raise IOError(str(exc)) from exc
        return self._extract_phrases_from_text(text)

    def _add_phrases_to_table(
        self,
        phrases: Iterable[str],
        *,
        source: str = "—Ñ—Ä–∞–∑",
        checked: bool = True,
    ) -> int:
        normalized: List[str] = []
        for phrase in phrases:
            phrase_text = str(phrase).strip()
            if not phrase_text:
                continue
            normalized.append(phrase_text)

        if not normalized:
            return 0

        for phrase in normalized:
            self._insert_phrase_row(phrase, checked=checked)

        self._renumber_rows()
        source_label = source or "—Ñ—Ä–∞–∑"
        self._append_log(
            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {source_label}: {len(normalized)} (–≤—Å–µ–≥–æ: {self.table.rowCount()})"
        )
        return len(normalized)

    def _on_add_from_clipboard(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
        clipboard = QGuiApplication.clipboard()
        if clipboard is None:
            self._append_log("‚ùå –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        text = clipboard.text() or ""
        phrases = self._extract_phrases_from_text(text)
        if not phrases:
            self._append_log("‚ùå –í –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ –Ω–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        self._manual_phrases_cache = "\n".join(phrases)
        self._add_phrases_to_table(phrases, source="—Ñ—Ä–∞–∑ –∏–∑ –±—É—Ñ–µ—Ä–∞", checked=True)

    def _on_add_from_file(self) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏",
            "",
            "Text files (*.txt);;All files (*)",
        )
        if not file_path:
            return

        path = Path(file_path)
        try:
            phrases = self._read_phrases_from_file(path)
        except IOError as exc:
            QMessageBox.warning(
                self,
                "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞",
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{path}\n\n{exc}",
            )
            self._append_log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏: {exc}")
            return

        if not phrases:
            QMessageBox.information(
                self,
                "–ò–º–ø–æ—Ä—Ç —Ñ—Ä–∞–∑",
                "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–∑.",
            )
            self._append_log("‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        self._manual_phrases_cache = "\n".join(phrases)
        self._add_phrases_to_table(
            phrases,
            source=f"—Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞ {path.name}",
            checked=True,
        )

    def _on_delete_phrases(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        rows_to_remove = [
            row for row in range(self.table.rowCount())
            if (checkbox := self._get_checkbox(row)) and checkbox.isChecked()
        ]
        if not rows_to_remove:
            rows_to_remove = [idx.row() for idx in self.table.selectionModel().selectedRows()]

        if not rows_to_remove:
            self._append_log("‚ùå –ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        unique_rows = sorted(set(rows_to_remove), reverse=True)
        for row in unique_rows:
            self.table.removeRow(row)

        self._renumber_rows()

        self._append_log(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(unique_rows)} (–æ—Å—Ç–∞–ª–æ—Å—å: {self.table.rowCount()})")

    def _on_clear_results(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        row_count = self.table.rowCount()
        self.table.setRowCount(0)
        self._append_log(f"üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞ ({row_count} —Å—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ)")

    def _on_batch_parsing(self):
        """–ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        from ..dialogs.batch_collect_dialog import BatchCollectDialog

        dialog = BatchCollectDialog(self)
        dialog.collect_requested.connect(self._on_batch_collect_requested)
        dialog.exec()

    def _on_batch_collect_requested(self, phrases: List[str], settings: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Ñ—Ä–∞–∑"""
        self._append_log("=" * 70)
        self._append_log("üì¶ –ü–ê–ö–ï–¢–ù–´–ô –°–ë–û–† –§–†–ê–ó")
        self._append_log(f"üìù –§—Ä–∞–∑ –¥–ª—è —Å–±–æ—Ä–∞: {len(phrases)}")

        # –†–µ–≥–∏–æ–Ω—ã
        geo_ids = settings.get("geo_ids", [225])
        self._append_log(f"üåç –†–µ–≥–∏–æ–Ω—ã: {geo_ids}")

        # –ü–æ—Ä–æ–≥ –ø–æ–∫–∞–∑–æ–≤
        threshold = settings.get("threshold", 20)
        self._append_log(f"üìä –ü–æ—Ä–æ–≥ –ø–æ–∫–∞–∑–æ–≤: {threshold}")

        self._append_log("=" * 70)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—ã –≤ —Ç–∞–±–ª–∏—Ü—É
        for phrase in phrases:
            self._insert_phrase_row(phrase, status="‚è±", checked=True)
        self._renumber_rows()

        self._append_log(f"‚úÖ –§—Ä–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {len(phrases)}")
        self._append_log("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞")

    def _on_forecast(self):
        """–ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ - –∑–∞–≥–ª—É—à–∫–∞"""
        self._append_log("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ü–∞—Ä—Å–∏–Ω–≥
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _on_wordstat_dropdown(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ Wordstat –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π '–ß–∞—Å—Ç–æ—Ç–∫–∞'"""
        # 1. –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π –≤–∏–¥–∂–µ—Ç
        if self._wordstat_dropdown is None:
            self._wordstat_dropdown = WordstatDropdownWidget(self)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self._wordstat_dropdown.parsing_requested.connect(self._on_dropdown_parsing_requested)
            self._wordstat_dropdown.closed.connect(self._on_dropdown_closed)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
            profiles = self._get_selected_profiles()
            if profiles:
                self._wordstat_dropdown.set_profiles(profiles)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self._wordstat_dropdown.set_initial_settings(self._last_settings)
        
        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π "–ß–∞—Å—Ç–æ—Ç–∫–∞"
        self._wordstat_dropdown.show_at_button(self.btn_ws)
        self._append_log("üìä –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–æ")

    def _on_dropdown_parsing_requested(self, settings: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é"""
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã
        phrases = self._get_selected_phrases()
        if not phrases:
            phrases = self._get_all_phrases()
            if phrases:
                self._append_log("‚ÑπÔ∏è –ß–µ–∫–±–æ–∫—Å—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã ‚Äî –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤—Å–µ —Ñ—Ä–∞–∑—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.")

        if not phrases:
            self._append_log("‚ùå –ù–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å').")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ë–î
        selected_profiles = self._get_selected_profiles()
        if not selected_profiles:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ë–î!\n\n–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ê–∫–∫–∞—É–Ω—Ç—ã'.")
            return

        normalized = self._normalize_wordstat_settings(settings)
        self._last_settings = normalized

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
        self._append_log("=" * 70)
        self._append_log("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –ß–ê–°–¢–û–¢–ù–û–°–¢–ò (–≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é)")
        self._append_log(f"üìù –§—Ä–∞–∑: {len(phrases)}")
        self._append_log(f"üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(selected_profiles)}")
        region_labels = normalized.get("region_names", ["–†–æ—Å—Å–∏—è (225)"])
        self._append_log(f"üåç –†–µ–≥–∏–æ–Ω—ã: {', '.join(region_labels)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        modes_list = normalized.get("modes", [])
        active_modes = []
        if "ws" in modes_list or normalized.get("ws"):
            active_modes.append("—Å–ª–æ–≤–æ")
        if "qws" in modes_list or normalized.get("qws"):
            active_modes.append('"—Å–ª–æ–≤–æ"')
        if "bws" in modes_list or normalized.get("bws"):
            active_modes.append("!—Å–ª–æ–≤–æ")
        self._append_log(f"‚öôÔ∏è –†–µ–∂–∏–º—ã: {', '.join(active_modes) if active_modes else '–Ω–µ—Ç'}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        self._append_log("üë• –ü—Ä–æ—Ñ–∏–ª–∏:")
        for i, prof in enumerate(selected_profiles, 1):
            email = prof.get("email", "unknown")
            proxy = prof.get("proxy", "–±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            self._append_log(f"   {i}. {email} ‚Üí {proxy}")
        
        self._append_log("=" * 70)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        self._run_parsing_with_settings(phrases, selected_profiles, normalized)

    def _on_dropdown_closed(self):
        """–í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ"""
        self._append_log("üìä –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç–æ")

    def _on_wordstat_clicked(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ Wordstat (–∫–∞–∫ –≤ GPTS-WORDSTAT-TASK)"""
        # 1) –í—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ (–±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –≤–æ–∑–≤—Ä–∞—Ç–æ–≤)
        dialog = WordstatSettingsDialog(self)
        # –ü–æ–¥—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–∏–∞–ª–æ–≥ —Ç–∞–∫–∂–µ —É–º–µ–µ—Ç –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø—Ä–∏ –û–ö)
        base_profiles = self._get_selected_profiles()
        if base_profiles:
            dialog.set_profiles(base_profiles)
        dialog.set_initial_settings(self._last_settings)

        if not dialog.exec():
            return

        # 2) –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        settings = dialog.get_settings()

        # 3) –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (—Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –≤—Å–µ)
        phrases = self._get_selected_phrases() or self._get_all_phrases()
        if not phrases:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å'.")
            return

        # 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        selected_profiles = settings.get("profiles", [])
        if not selected_profiles:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ.")
            return

        # 5) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        normalized = self._normalize_wordstat_settings(settings)
        self._last_settings = normalized
        self._run_parsing_with_settings(phrases, selected_profiles, normalized)

    def _run_parsing_with_settings(
        self,
        phrases: List[str],
        selected_profiles: List[dict],
        settings: dict,
    ) -> None:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
        if not TURBO_PARSER_AVAILABLE:
            self._append_log("‚ùå turbo_parser_10tabs –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self._append_log(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {timestamp}")
        self._append_log("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –∫—É–∫...")

        for profile_info in selected_profiles:
            cookie_count, cookie_error = _probe_profile_cookies(profile_info)
            proxy_value = profile_info.get("proxy") or "–±–µ–∑ –ø—Ä–æ–∫—Å–∏"
            if cookie_count >= 0:
                profile_info["cookie_count"] = cookie_count
                self._append_log(
                    f"   ‚Ä¢ {profile_info.get('email', 'unknown')} ‚Üí –ø—Ä–æ–∫—Å–∏ {proxy_value}, –∫—É–∫–∏ {cookie_count} —à—Ç"
                )
            else:
                profile_info["cookie_count"] = None
                self._append_log(
                    f"   ‚Ä¢ {profile_info.get('email', 'unknown')} ‚Üí –ø—Ä–æ–∫—Å–∏ {proxy_value}, –∫—É–∫–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã ({cookie_error})"
                )

        geo_ids = [int(rid) for rid in settings.get("regions") or [225]]
        region_labels = list(settings.get("region_names") or [str(rid) for rid in geo_ids])
        raw_region_map = settings.get("regions_map") if isinstance(settings.get("regions_map"), dict) else {}
        normalized_region_map: Dict[int, str] = {}
        if raw_region_map:
            for key, value in raw_region_map.items():
                try:
                    region_id = int(key)
                except (TypeError, ValueError):
                    continue
                normalized_region_map[region_id] = str(value)
        if not normalized_region_map:
            for index, region_id in enumerate(geo_ids):
                label = region_labels[index] if index < len(region_labels) else str(region_id)
                normalized_region_map[int(region_id)] = str(label)

        modes_list = [str(mode) for mode in settings.get("modes") or []]
        modes_flags = {
            "ws": ("ws" in modes_list) or bool(settings.get("ws")),
            "qws": ("qws" in modes_list) or bool(settings.get("qws")),
            "bws": ("bws" in modes_list) or bool(settings.get("bws")),
        }
        active_mode_keys = [name for name, enabled in modes_flags.items() if enabled]

        self._active_profiles = selected_profiles
        self._active_phrases = phrases
        self._active_regions = dict(normalized_region_map)
        self._configure_table_columns(self._active_regions)

        self._mark_phrases_pending(phrases)
        self.btn_run.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.btn_pause.setEnabled(True)
        self.btn_pause.setText("‚è∏ –ü–∞—É–∑–∞")
        self.progress.setVisible(True)
        self.progress.setValue(0)
        self.status_label.setText("üü† –í —Ä–∞–±–æ—Ç–µ")

        self._append_log(f"üåç –†–µ–≥–∏–æ–Ω—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {list(normalized_region_map.values())}")
        self._append_log("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:")
        for idx, profile in enumerate(selected_profiles, 1):
            self._append_log(f"   {idx}. {profile['email']} ‚Üí {profile['profile_path']}")

        self._append_log("üîß –°–æ–∑–¥–∞—é MultiParsingWorker...")
        self._worker = MultiParsingWorker(
            phrases=phrases,
            modes=active_mode_keys,
            regions_map=normalized_region_map,
            geo_ids=geo_ids,
            selected_profiles=selected_profiles,
            parent=self
        )
        self._append_log("‚úì MultiParsingWorker —Å–æ–∑–¥–∞–Ω")

        self._append_log("üîå –ü–æ–¥–∫–ª—é—á–∞—é —Å–∏–≥–Ω–∞–ª—ã worker...")
        self._worker.log_signal.connect(self._append_log)
        self._worker.profile_log_signal.connect(self._on_profile_log)
        self._worker.progress_signal.connect(self._on_progress_update)
        self._worker.task_completed.connect(self._on_task_completed)
        self._worker.all_finished.connect(self._on_all_finished)
        self._append_log("‚úì –°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

        self.save_session_state()
        self._append_log("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é worker.start()...")
        self._worker.start()
        self._append_log("‚úì Worker –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–æ–≤...")
        
    def _on_stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        if self._worker:
            self._worker.stop()
            self._worker = None
        self.btn_run.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.btn_pause.setEnabled(False)
        self.btn_pause.setText("‚è∏ –ü–∞—É–∑–∞")
        self.progress.setVisible(False)
        self.status_label.setText("üü• –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        self._append_log("‚èπ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def _on_pause_parsing(self):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –ø–∞—É–∑—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É."""
        if not self._worker:
            return
        if self._worker.is_paused:
            self._worker.resume()
            self.btn_pause.setText("‚è∏ –ü–∞—É–∑–∞")
            self.status_label.setText("üü† –í —Ä–∞–±–æ—Ç–µ")
            self._append_log("‚ñ∂Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω")
        else:
            self._worker.pause()
            self.btn_pause.setText("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            self.status_label.setText("‚è∏ –ù–∞ –ø–∞—É–∑–µ")
            self._append_log("‚è∏ –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
        
    def _append_log(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        if hasattr(self, "activity_log") and self.activity_log is not None:
            self.activity_log.append_line(message)
        
    def _log_activity(self, message: str):
        """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∞–ª–∏–∞—Å –¥–ª—è –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π."""
        self._append_log(message)
        
    def _on_profile_log(self, profile_email: str, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∞ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
        prefix = f"[{profile_email}] " if profile_email else ""
        self._append_log(prefix + message)
        
    def _on_progress_update(self, progress_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if progress_data:
            total_progress = sum(progress_data.values()) / len(progress_data)
            self.progress.setValue(int(total_progress))
            
    def _on_task_completed(self, profile_email: str, results: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        total = len(results) if results else 0
        self._append_log(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_email} –∑–∞–≤–µ—Ä—à–∏–ª –ø–∞—Ä—Å–∏–Ω–≥. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total}")
        
    def _on_all_finished(self, all_results: List[dict]):
        """–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"""
        self._worker = None
        self.btn_run.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.btn_pause.setEnabled(False)
        self.btn_pause.setText("‚è∏ –ü–∞—É–∑–∞")
        self.progress.setVisible(False)
        self.status_label.setText("üü¢ –ì–æ—Ç–æ–≤–æ")

        normalized_rows = self._populate_results(all_results)
        self._renumber_rows()

        self._append_log("=" * 70)
        self._append_log(f"‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
        self._append_log(f"üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(normalized_rows)}")
        self._append_log("=" * 70)

        self.save_session_state(partial_results=normalized_rows)
        
    def _on_export_clicked(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Å 2 –∫–æ–ª–æ–Ω–∫–∞–º–∏: –§—Ä–∞–∑–∞ –∏ –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å"""
        if self.table.rowCount() == 0:
            self._append_log("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            f"parsing_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv);;All Files (*)"
        )

        if file_path:
            try:
                import csv

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ: —Ñ—Ä–∞–∑–∞ + WS (–∫–æ–ª–æ–Ω–∫–∏ 2 –∏ 3)
                export_data = []
                for row in range(self.table.rowCount()):
                    phrase_item = self.table.item(row, 2)  # –ö–æ–ª–æ–Ω–∫–∞ "–§—Ä–∞–∑–∞"
                    ws_item = self.table.item(row, 3)      # –ö–æ–ª–æ–Ω–∫–∞ "WS"

                    if phrase_item and ws_item:
                        phrase = phrase_item.text()
                        ws_text = ws_item.text()

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ
                        try:
                            ws_value = int(float(ws_text)) if ws_text else 0
                        except (ValueError, TypeError):
                            ws_value = 0

                        export_data.append({
                            'phrase': phrase,
                            'frequency': ws_value
                        })

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é - —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
                export_data.sort(key=lambda x: x['frequency'], reverse=True)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV —Å TAB —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                # TAB –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –∑–∞–ø—è—Ç–æ–π, —Ç.–∫. –≤ —Ñ—Ä–∞–∑–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø—è—Ç—ã–µ
                with open(file_path, 'w', newline='', encoding='utf-8-sig') as f:
                    writer = csv.writer(f, delimiter='\t', quoting=csv.QUOTE_MINIMAL)

                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ 2 –∫–æ–ª–æ–Ω–∫–∏)
                    writer.writerow(['–§—Ä–∞–∑–∞', '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å'])

                    # –î–∞–Ω–Ω—ã–µ
                    for item in export_data:
                        writer.writerow([item['phrase'], item['frequency']])

                self._append_log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
                self._append_log(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(export_data)} –∑–∞–ø–∏—Å–µ–π")

            except Exception as e:
                self._append_log(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
