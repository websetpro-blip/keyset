# -*- coding: utf-8 -*-
from __future__ import annotations

import asyncio
import json
import sys
import time
from collections import defaultdict
from datetime import datetime
from pathlib import Path
from typing import Optional, List, Dict, Any, Tuple

from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QGroupBox,
    QSplitter,
    QPushButton,
    QTextEdit,
    QLabel,
    QCheckBox,
    QTableWidget,
    QTableWidgetItem,
    QProgressBar,
    QFileDialog,
    QAbstractItemView,
)

from ..widgets.geo_tree import GeoTree
from ..keys_panel import KeysPanel

try:
    from ...services.accounts import list_accounts
except ImportError:
    from services.accounts import list_accounts

try:
    from ...services import multiparser_manager
except ImportError:  # pragma: no cover - fallback for scripts
    import multiparser_manager  # type: ignore

# –ò–º–ø–æ—Ä—Ç turbo_parser_10tabs
PACKAGE_ROOT = Path(__file__).resolve().parents[2]
PROJECT_ROOT = Path(__file__).resolve().parents[3]
if str(PACKAGE_ROOT) not in sys.path:
    sys.path.insert(0, str(PACKAGE_ROOT))

BASE_DIR = PROJECT_ROOT
SESSION_FILE = BASE_DIR / "keyset/logs/parsing_session.json"


def _probe_profile_cookies(profile_record: Dict[str, Any]) -> Tuple[int, Optional[str]]:
    """
    Quickly read cookies from the Chrome profile on disk to report how many are available.

    Returns:
        (cookie_count, error_message)
    """
    path_value = profile_record.get("profile_path")
    if not path_value:
        return -1, "–ü—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω"

    try:
        path_obj = Path(path_value)
    except TypeError:
        return -1, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—É—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è: {path_value!r}"

    log_obj = getattr(multiparser_manager, "logger", None)
    if log_obj is None:
        return -1, "–õ–æ–≥–≥–µ—Ä multiparser_manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"

    try:
        cookies = multiparser_manager._extract_profile_cookies(  # type: ignore[attr-defined]
            path_obj,
            log_obj,
        )
    except Exception as exc:  # pragma: no cover - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
        return -1, str(exc)

    if cookies is None:
        return -1, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫—É–∫–∏"

    return len(cookies), None

try:
    from turbo_parser_improved import turbo_parser_10tabs  # type: ignore
    TURBO_PARSER_AVAILABLE = True
except ImportError as improved_error:  # pragma: no cover - optional dependency
    try:
        from turbo_parser_10tabs import turbo_parser_10tabs  # type: ignore
        TURBO_PARSER_AVAILABLE = True
    except ImportError as e:
        print(f"[WARNING] turbo_parser_10tabs not available: {e}")
        turbo_parser_10tabs = None
        TURBO_PARSER_AVAILABLE = False


class SingleParsingTask:
    """–û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    
    def __init__(
        self,
        profile_email: str,
        profile_path: str,
        proxy: str,
        phrases: List[str],
        session_id: str,
        cookie_count: Optional[int] = None,
    ):
        self.profile_email = profile_email
        self.profile_path = Path(profile_path)
        self.proxy = proxy
        self.phrases = phrases
        self.session_id = session_id
        self.cookie_count = cookie_count
        self.results = {}
        self.status = "waiting"
        self.progress = 0
        self.logs = []
        
    def log(self, message: str, level: str = "INFO"):
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_line = f"[{timestamp}] [{level}] [{self.profile_email}] {message}"
        self.logs.append(log_line)
        return log_line
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.status = "running"
        self.log(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {len(self.phrases)} —Ñ—Ä–∞–∑", "INFO")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            if not self.profile_path.exists():
                self.log(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.profile_path}", "ERROR")
                self.status = "error"
                return
                
            self.log(f"‚úì –ü—Ä–æ—Ñ–∏–ª—å: {self.profile_path}", "INFO")
            self.log(f"‚úì –ü—Ä–æ–∫—Å–∏: {self.proxy or '–ù–ï–¢'}", "INFO")
            if self.cookie_count is not None:
                self.log(f"‚úì –ö—É–∫–∏ (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ): {self.cookie_count} —à—Ç", "INFO")
            
            # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
            self.results = await turbo_parser_10tabs(
                account_name=self.profile_email,
                profile_path=self.profile_path,
                phrases=self.phrases,
                headless=False,
                proxy_uri=self.proxy,
            )
            
            self.log(f"‚úì –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω–æ: {len(self.results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "SUCCESS")
            self.status = "completed"
            self.progress = 100
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "ERROR")
            self.status = "error"
            self.progress = 0


class MultiParsingWorker(QThread):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    log_signal = Signal(str)  # –û–±—â–∏–π –ª–æ–≥
    profile_log_signal = Signal(str, str)  # –õ–æ–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (email, message)
    progress_signal = Signal(dict)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    task_completed = Signal(str, dict)  # –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (email, results)
    all_finished = Signal(list)  # –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    
    def __init__(
        self,
        phrases: List[str],
        modes: dict,
        geo_ids: List[int],
        selected_profiles: List[dict],  # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        parent: QWidget | None = None,
    ):
        super().__init__(parent)
        self.phrases = phrases
        self.modes = modes
        self.geo_ids = geo_ids or [225]
        self.selected_profiles = selected_profiles
        self._stop_requested = False
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—Ä–∞–∑—ã –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        num_profiles = len(selected_profiles)
        phrases_per_profile = len(phrases) // num_profiles
        remainder = len(phrases) % num_profiles

        batches = []
        start_idx = 0

        for i in range(num_profiles):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø—Ä–æ—Ñ–∏–ª—è–º –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
            end_idx = start_idx + phrases_per_profile + (1 if i >= num_profiles - remainder else 0)
            batch = phrases[start_idx:end_idx]
            batches.append(batch)
            start_idx = end_idx

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏
        self.tasks = []
        for profile, batch in zip(selected_profiles, batches):
            task = SingleParsingTask(
                profile_email=profile['email'],
                profile_path=profile['profile_path'],
                proxy=profile.get('proxy'),
                phrases=batch,  # ‚úÖ –ö–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û —Å–≤–æ–π –±–∞—Ç—á —Ñ—Ä–∞–∑
                session_id=self.session_id,
                cookie_count=profile.get("cookie_count"),
            )
            self.tasks.append(task)
            
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log_file = Path("C:/AI/yandex/keyset/logs/multiparser_journal.log")
        self.log_file.parent.mkdir(parents=True, exist_ok=True)
    
    def stop(self):
        self._stop_requested = True
        
    def _write_log(self, message: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ GUI"""
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(message + "\n")
        except Exception as e:
            print(f"Log write error: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GUI
        self.log_signal.emit(message)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        self._write_log("=" * 70)
        self._write_log(f"üöÄ –ó–ê–ü–£–°–ö –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        self._write_log(f"üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(self.selected_profiles)}")
        self._write_log(f"üìù –§—Ä–∞–∑: {len(self.phrases)}")
        self._write_log("=" * 70)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            loop.run_until_complete(self._run_all_parsers())
        finally:
            loop.close()
            
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_results = []
        for task in self.tasks:
            if task.results:
                for phrase, freq in task.results.items():
                    all_results.append({
                        "phrase": phrase,
                        "ws": freq if isinstance(freq, (int, str)) else freq.get("ws", 0),
                        "qws": freq.get("qws", 0) if isinstance(freq, dict) else 0,
                        "bws": freq.get("bws", 0) if isinstance(freq, dict) else 0,
                        "status": "OK",
                        "profile": task.profile_email,
                    })
                    
        self._write_log("=" * 70)
        self._write_log(f"‚úÖ –í–°–ï –ó–ê–î–ê–ß–ò –ó–ê–í–ï–†–®–ï–ù–´")
        self._write_log(f"üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(all_results)}")
        self._write_log("=" * 70)
        
        self.all_finished.emit(all_results)
    
    async def _run_all_parsers(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        tasks_coro = []
        
        for task in self.tasks:
            if self._stop_requested:
                break
                
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
            tasks_coro.append(self._run_single_parser(task))
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ—Ä—É—Ç–∏–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks_coro, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                self._write_log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {self.tasks[i].profile_email}: {str(result)}")
    
    async def _run_single_parser(self, task: SingleParsingTask):
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        self._write_log(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {task.profile_email}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ª–æ–≥–∏ –∑–∞–¥–∞—á–∏
        def log_callback(msg, level):
            full_msg = task.log(msg, level)
            self._write_log(full_msg)
            self.profile_log_signal.emit(task.profile_email, full_msg)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await task.run()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∑–∞–¥–∞—á–∏
        for log_line in task.logs:
            self._write_log(log_line)
            self.profile_log_signal.emit(task.profile_email, log_line)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        self.task_completed.emit(task.profile_email, task.results)
        
        return task.results


class ParsingTab(QWidget):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, parent: QWidget | None = None, keys_panel: KeysPanel | None = None):
        super().__init__(parent)
        self._worker = None
        self._keys_panel = keys_panel
        self._init_ui()
        self._wire_signals()
        self._restore_session_state()

    def _init_ui(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Key Collector"""
        main_layout = QVBoxLayout(self)

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 1Ô∏è‚É£ TOP PANEL - —Ñ—É–Ω–∫—Ü–∏–∏ –≤–≤–µ—Ä—Ö—É
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        top_panel = QWidget()
        top_layout = QHBoxLayout(top_panel)

        # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.btn_add = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.btn_delete = QPushButton("‚ùå –£–¥–∞–ª–∏—Ç—å")
        self.btn_ws = QPushButton("üìä –ß–∞—Å—Ç–æ—Ç–∫–∞")
        self.btn_batch = QPushButton("üì¶ –ü–∞–∫–µ—Ç")
        self.btn_forecast = QPushButton("üí∞ –ü—Ä–æ–≥–Ω–æ–∑")
        self.btn_clear = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        self.btn_export = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")

        top_layout.addWidget(self.btn_add)
        top_layout.addWidget(self.btn_delete)
        top_layout.addWidget(QLabel("  |  "))
        top_layout.addWidget(self.btn_ws)
        top_layout.addWidget(self.btn_batch)
        top_layout.addWidget(self.btn_forecast)
        top_layout.addWidget(QLabel("  |  "))
        top_layout.addWidget(self.btn_clear)
        top_layout.addWidget(self.btn_export)
        top_layout.addStretch()

        # –°—Ç–∞—Ç—É—Å
        self.status_label = QLabel("üü¢ –ì–æ—Ç–æ–≤–æ")
        self.status_label.setStyleSheet("QLabel { font-weight: bold; padding: 5px; }")
        top_layout.addWidget(self.status_label)

        main_layout.addWidget(top_panel)

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 2Ô∏è‚É£ –ì–õ–ê–í–ù–ê–Ø –û–ë–õ–ê–°–¢–¨ - 3 –∫–æ–ª–æ–Ω–∫–∏
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        splitter_main = QSplitter(Qt.Horizontal)

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê (5-10%) - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–æ–∫
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        left_layout.setContentsMargins(0, 0, 0, 0)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º
        self.btn_select_all_rows = QPushButton("‚úì –í—ã–±—Ä–∞—Ç—å –≤—Å–µ")
        self.btn_deselect_all_rows = QPushButton("‚úó –°–Ω—è—Ç—å –≤—ã–±–æ—Ä")
        self.btn_invert_selection = QPushButton("üîÑ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")

        left_layout.addWidget(self.btn_select_all_rows)
        left_layout.addWidget(self.btn_deselect_all_rows)
        left_layout.addWidget(self.btn_invert_selection)
        left_layout.addSpacing(10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_layout = QVBoxLayout(settings_group)

        # –†–µ–∂–∏–º—ã
        self.chk_ws = QCheckBox("WS")
        self.chk_ws.setChecked(True)
        self.chk_qws = QCheckBox('"WS"')
        self.chk_bws = QCheckBox("!WS")
        settings_layout.addWidget(QLabel("–†–µ–∂–∏–º—ã:"))
        settings_layout.addWidget(self.chk_ws)
        settings_layout.addWidget(self.chk_qws)
        settings_layout.addWidget(self.chk_bws)

        # –†–µ–≥–∏–æ–Ω—ã
        self.geo_tree = GeoTree()
        self.geo_tree.setMaximumHeight(80)
        settings_layout.addWidget(QLabel("–†–µ–≥–∏–æ–Ω—ã:"))
        settings_layout.addWidget(self.geo_tree)

        left_layout.addWidget(settings_group)
        left_layout.addStretch()

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        # –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –ö–û–õ–û–ù–ö–ê (80%) - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        center_panel = QWidget()
        center_layout = QVBoxLayout(center_panel)
        center_layout.setContentsMargins(0, 0, 0, 0)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        control_buttons = QHBoxLayout()
        self.btn_run = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
        self.btn_run.setStyleSheet("QPushButton { font-weight: bold; padding: 8px; }")
        self.btn_stop = QPushButton("‚èπ –°—Ç–æ–ø")
        self.btn_stop.setEnabled(False)

        control_buttons.addWidget(self.btn_run)
        control_buttons.addWidget(self.btn_stop)
        control_buttons.addStretch()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress = QProgressBar()
        self.progress.setVisible(False)
        control_buttons.addWidget(self.progress)

        center_layout.addLayout(control_buttons)

        # –û–°–ù–û–í–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels([
            "‚Ññ", "–§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å"
        ])

        # –†–∞–∑–º–µ—Ä—ã –∫–æ–ª–æ–Ω–æ–∫ - –§–†–ê–ó–ê —Å–∞–º–∞—è —à–∏—Ä–æ–∫–∞—è!
        self.table.setColumnWidth(0, 40)    # ‚Ññ - —É–∑–∫–∞—è
        self.table.setColumnWidth(1, 500)   # –§—Ä–∞–∑–∞ - –®–ò–†–û–ö–ê–Ø (–æ—Å–Ω–æ–≤–Ω–∞—è)
        self.table.setColumnWidth(2, 120)   # –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
        self.table.setColumnWidth(3, 80)    # –°—Ç–∞—Ç—É—Å

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.MultiSelection)
        self.table.setMinimumHeight(400)

        center_layout.addWidget(self.table)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ—Ä–∞–∑ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ, –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π)
        phrases_label = QLabel("–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã:")
        self.phrases_edit = QTextEdit()
        self.phrases_edit.setMaximumHeight(80)
        self.phrases_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)")

        center_layout.addWidget(phrases_label)
        center_layout.addWidget(self.phrases_edit)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ splitter (2 –∫–æ–ª–æ–Ω–∫–∏: –ª–µ–≤–∞—è + —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è)
        splitter_main.addWidget(left_panel)
        splitter_main.addWidget(center_panel)

        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏: –õ–µ–≤–∞—è ~100px, –¶–µ–Ω—Ç—Ä ~900px
        splitter_main.setSizes([100, 900])

        main_layout.addWidget(splitter_main)

        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # 3Ô∏è‚É£ BOTTOM JOURNAL - –∂—É—Ä–Ω–∞–ª –≤–Ω–∏–∑—É
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        journal_group = QGroupBox("üìã –ñ—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        journal_layout = QVBoxLayout(journal_group)

        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMaximumHeight(150)
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #00ff00;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 9pt;
            }
        """)

        journal_layout.addWidget(self.log_text)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        self.btn_clear_log = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª")
        journal_layout.addWidget(self.btn_clear_log)

        main_layout.addWidget(journal_group)
        
    def _wire_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # TOP PANEL –∫–Ω–æ–ø–∫–∏
        self.btn_add.clicked.connect(self._on_add_phrases)
        self.btn_delete.clicked.connect(self._on_delete_phrases)
        self.btn_ws.clicked.connect(self._on_run_clicked)  # –ß–∞—Å—Ç–æ—Ç–∫–∞ = –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.btn_batch.clicked.connect(self._on_batch_parsing)
        self.btn_forecast.clicked.connect(self._on_forecast)
        self.btn_clear.clicked.connect(self._on_clear_results)
        self.btn_export.clicked.connect(self._on_export_clicked)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
        self.btn_run.clicked.connect(self._on_run_clicked)
        self.btn_stop.clicked.connect(self._on_stop_clicked)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–æ–∫
        self.btn_select_all_rows.clicked.connect(self._select_all_rows)
        self.btn_deselect_all_rows.clicked.connect(self._deselect_all_rows)
        self.btn_invert_selection.clicked.connect(self._invert_selection)

        # –ñ—É—Ä–Ω–∞–ª
        self.btn_clear_log.clicked.connect(self.log_text.clear)
        
    def _get_selected_profiles(self) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –ë–î (–≤–∫–ª–∞–¥–∫–∞ –ê–∫–∫–∞—É–Ω—Ç—ã)"""
        selected = []
        try:
            accounts = list_accounts()
            for account in accounts:
                raw_profile_path = getattr(account, "profile_path", "") or ""
                if not raw_profile_path:
                    continue
                profile_path = Path(raw_profile_path)
                if not profile_path.is_absolute():
                    profile_path = (BASE_DIR / profile_path).resolve()
                else:
                    profile_path = profile_path.resolve()

                proxy_value = getattr(account, "proxy", None)

                selected.append({
                    'email': account.name,
                    'proxy': proxy_value.strip() if isinstance(proxy_value, str) else proxy_value,
                    'profile_path': str(profile_path),
                })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {str(e)}")

        return selected

    def save_session_state(self, partial_results: List[Dict[str, Any]] | None = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ."""
        try:
            SESSION_FILE.parent.mkdir(parents=True, exist_ok=True)
        except Exception as exc:  # pragma: no cover - best effort
            print(f"[ERROR] Failed to prepare session directory: {exc}")
            return

        phrases = [line.strip() for line in self.phrases_edit.toPlainText().splitlines() if line.strip()]
        state: Dict[str, Any] = {
            "timestamp": datetime.now().isoformat(),
            "phrases": phrases,
            "modes": {
                "ws": self.chk_ws.isChecked(),
                "qws": self.chk_qws.isChecked(),
                "bws": self.chk_bws.isChecked(),
            },
            "geo_ids": self.geo_tree.selected_geo_ids(),
        }
        if partial_results is not None:
            state["partial_results"] = partial_results

        try:
            with SESSION_FILE.open("w", encoding="utf-8") as fh:
                json.dump(state, fh, ensure_ascii=False, indent=2)
        except Exception as exc:
            print(f"[ERROR] Failed to save session: {exc}")

    def load_session_state(self) -> Dict[str, Any] | None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ."""
        if not SESSION_FILE.exists():
            return None
        try:
            with SESSION_FILE.open("r", encoding="utf-8") as fh:
                return json.load(fh)
        except Exception as exc:
            print(f"[ERROR] Failed to load session: {exc}")
            return None

    def _restore_session_state(self) -> None:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        state = self.load_session_state()
        if not state:
            return

        phrases = state.get("phrases") or []
        if phrases:
            self.phrases_edit.setPlainText("\n".join(phrases))

        modes = state.get("modes") or {}
        self.chk_ws.setChecked(bool(modes.get("ws", True)))
        self.chk_qws.setChecked(bool(modes.get("qws", False)))
        self.chk_bws.setChecked(bool(modes.get("bws", False)))

        partial_results = state.get("partial_results") or []
        if isinstance(partial_results, list):
            self._populate_results(partial_results)

    @staticmethod
    def _coerce_freq(value: Any) -> int:
        if value is None:
            return 0
        if isinstance(value, bool):
            return int(value)
        if isinstance(value, (int, float)):
            return int(value)
        if isinstance(value, str):
            stripped = value.strip().replace(" ", "")
            if not stripped:
                return 0
            try:
                return int(float(stripped))
            except ValueError:
                return 0
        return 0

    def _aggregate_by_phrase(self, rows: List[Dict[str, Any]]) -> Dict[str, Dict[str, int]]:
        aggregated: Dict[str, Dict[str, int]] = {}
        for record in rows:
            phrase = str(record.get("phrase", "")).strip()
            if not phrase:
                continue
            entry = aggregated.setdefault(phrase, {"ws": 0, "qws": 0, "bws": 0})
            entry["ws"] = max(entry["ws"], self._coerce_freq(record.get("ws")))
            entry["qws"] = max(entry["qws"], self._coerce_freq(record.get("qws")))
            entry["bws"] = max(entry["bws"], self._coerce_freq(record.get("bws")))
        return aggregated

    def _populate_results(self, rows: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ (–∑–∞–ø–æ–ª–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å)."""
        normalized_rows: List[Dict[str, Any]] = []

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ñ—Ä–∞–∑–∞–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        results_map = {}
        for record in rows:
            phrase = str(record.get("phrase", ""))
            ws_value = record.get("ws", "")
            status_value = record.get("status", "")
            results_map[phrase] = {
                "ws": str(ws_value) if ws_value is not None else "",
                "status": str(status_value) if status_value else "OK"
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
        for row in range(self.table.rowCount()):
            phrase_item = self.table.item(row, 1)
            if phrase_item:
                phrase = phrase_item.text()

                # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–π —Ñ—Ä–∞–∑—ã –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
                if phrase in results_map:
                    result = results_map[phrase]

                    # –ö–æ–ª–æ–Ω–∫–∞ 2: –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å
                    self.table.setItem(row, 2, QTableWidgetItem(result["ws"]))

                    # –ö–æ–ª–æ–Ω–∫–∞ 3: –°—Ç–∞—Ç—É—Å
                    status_text = "‚úì" if result["status"] == "OK" and result["ws"] else "‚è±"
                    self.table.setItem(row, 3, QTableWidgetItem(status_text))

                    normalized_rows.append({
                        "phrase": phrase,
                        "ws": result["ws"],
                        "status": result["status"],
                    })

        self._append_log(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(normalized_rows)}")

        if self._keys_panel:
            groups = defaultdict(list)
            aggregated = self._aggregate_by_phrase(normalized_rows)
            for phrase, metrics in aggregated.items():
                group_name = phrase.split()[0] if phrase else "–ü—Ä–æ—á–µ–µ"
                groups[group_name].append(
                    {
                        "phrase": phrase,
                        "freq_total": metrics["ws"],
                        "freq_quotes": metrics["qws"],
                        "freq_exact": metrics["bws"],
                    }
                )
            self._keys_panel.load_groups(groups)

        return normalized_rows

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–æ–∫ (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _select_all_rows(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        self.table.selectAll()
        self._append_log(f"‚úì –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–æ–∫: {self.table.rowCount()}")

    def _deselect_all_rows(self):
        """–°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫"""
        self.table.clearSelection()
        self._append_log("‚úó –í—ã–±–æ—Ä —Å–Ω—è—Ç")

    def _invert_selection(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫"""
        for row in range(self.table.rowCount()):
            if self.table.item(row, 0).isSelected():
                self.table.item(row, 0).setSelected(False)
            else:
                self.table.selectRow(row)
        selected_count = len(self.table.selectionModel().selectedRows())
        self._append_log(f"üîÑ –í—ã–±–æ—Ä –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ({selected_count} —Å—Ç—Ä–æ–∫)")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –§—É–Ω–∫—Ü–∏–∏ TOP PANEL (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _on_add_phrases(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        text = self.phrases_edit.toPlainText().strip()
        if not text:
            self._append_log("‚ùå –ù–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        phrases = [line.strip() for line in text.splitlines() if line.strip()]

        for phrase in phrases:
            row_idx = self.table.rowCount()
            self.table.insertRow(row_idx)

            # ‚Ññ (–Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏)
            self.table.setItem(row_idx, 0, QTableWidgetItem(str(row_idx + 1)))

            # –§—Ä–∞–∑–∞
            self.table.setItem(row_idx, 1, QTableWidgetItem(phrase))

            # –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å (–ø—É—Å—Ç–æ)
            self.table.setItem(row_idx, 2, QTableWidgetItem(""))

            # –°—Ç–∞—Ç—É—Å
            self.table.setItem(row_idx, 3, QTableWidgetItem("‚Äî"))

        self.phrases_edit.clear()
        self._append_log(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ—Ä–∞–∑: {len(phrases)} (–≤—Å–µ–≥–æ: {self.table.rowCount()})")

    def _on_delete_phrases(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        selected_rows = sorted([idx.row() for idx in self.table.selectionModel().selectedRows()], reverse=True)

        if not selected_rows:
            self._append_log("‚ùå –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        for row in selected_rows:
            self.table.removeRow(row)

        # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏
        for row in range(self.table.rowCount()):
            self.table.setItem(row, 0, QTableWidgetItem(str(row + 1)))

        self._append_log(f"‚ùå –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(selected_rows)} (–æ—Å—Ç–∞–ª–æ—Å—å: {self.table.rowCount()})")

    def _on_clear_results(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        row_count = self.table.rowCount()
        self.table.setRowCount(0)
        self._append_log(f"üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞ ({row_count} —Å—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ)")

    def _on_batch_parsing(self):
        """–ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –∑–∞–≥–ª—É—à–∫–∞"""
        self._append_log("üì¶ –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    def _on_forecast(self):
        """–ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ - –∑–∞–≥–ª—É—à–∫–∞"""
        self._append_log("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ –±—é–¥–∂–µ—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # –ü–∞—Ä—Å–∏–Ω–≥
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    def _on_run_clicked(self):
        """–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–∫–æ–ª–æ–Ω–∫–∞ 1 - "–§—Ä–∞–∑–∞")
        phrases = []
        for row in range(self.table.rowCount()):
            phrase_item = self.table.item(row, 1)
            if phrase_item:
                phrase = phrase_item.text().strip()
                if phrase:
                    phrases.append(phrase)

        if not phrases:
            self._append_log("‚ùå –ù–µ—Ç —Ñ—Ä–∞–∑ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å')")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        selected_profiles = self._get_selected_profiles()
        if not selected_profiles:
            self._append_log("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return

        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self._append_log(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {timestamp}")
        self._append_log("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –∫—É–∫...")

        for profile_info in selected_profiles:
            cookie_count, cookie_error = _probe_profile_cookies(profile_info)
            proxy_value = profile_info.get("proxy") or "–±–µ–∑ –ø—Ä–æ–∫—Å–∏"
            if cookie_count >= 0:
                profile_info["cookie_count"] = cookie_count
                self._append_log(
                    f"   ‚Ä¢ {profile_info.get('email', 'unknown')} ‚Üí –ø—Ä–æ–∫—Å–∏ {proxy_value}, –∫—É–∫–∏ {cookie_count} —à—Ç"
                )
            else:
                profile_info["cookie_count"] = None
                self._append_log(
                    f"   ‚Ä¢ {profile_info.get('email', 'unknown')} ‚Üí –ø—Ä–æ–∫—Å–∏ {proxy_value}, –∫—É–∫–∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã ({cookie_error})"
                )
            
        # –†–µ–∂–∏–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
        modes = {
            "ws": self.chk_ws.isChecked(),
            "qws": self.chk_qws.isChecked(),
            "bws": self.chk_bws.isChecked(),
        }
        
        # –†–µ–≥–∏–æ–Ω—ã
        geo_ids = self.geo_tree.selected_geo_ids()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI
        self.btn_run.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.progress.setVisible(True)
        self.progress.setValue(0)
        self.table.setRowCount(0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
        self._append_log("=" * 70)
        self._append_log(f"üöÄ –ó–ê–ü–£–°–ö –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
        self._append_log(f"üìä –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(selected_profiles)}")
        self._append_log(f"üìù –§—Ä–∞–∑: {len(phrases)}")
        self._append_log("=" * 70)
        self._append_log("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –∫—É–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è turbo_parser_improved.load_cookies_from_profile_to_context")
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
        self._worker = MultiParsingWorker(
            phrases=phrases,
            modes=modes,
            geo_ids=geo_ids,
            selected_profiles=selected_profiles,
            parent=self
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self._worker.log_signal.connect(self._append_log)
        self._worker.profile_log_signal.connect(self._on_profile_log)
        self._worker.progress_signal.connect(self._on_progress_update)
        self._worker.task_completed.connect(self._on_task_completed)
        self._worker.all_finished.connect(self._on_all_finished)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        self.save_session_state()
        self._worker.start()
        
    def _on_stop_clicked(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if self._worker:
            self._worker.stop()
            self._worker = None
        self.btn_run.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.progress.setVisible(False)
        self._append_log("‚èπ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    def _append_log(self, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∂—É—Ä–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.log_text.append(message)
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        scrollbar = self.log_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
        
    def _on_profile_log(self, profile_email: str, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∞ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        pass
        
    def _on_progress_update(self, progress_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        if progress_data:
            total_progress = sum(progress_data.values()) / len(progress_data)
            self.progress.setValue(int(total_progress))
            
    def _on_task_completed(self, profile_email: str, results: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
        self._append_log(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile_email} –∑–∞–≤–µ—Ä—à–∏–ª –ø–∞—Ä—Å–∏–Ω–≥. –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
    def _on_all_finished(self, all_results: List[dict]):
        """–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"""
        self._worker = None
        self.btn_run.setEnabled(True)
        self.btn_stop.setEnabled(False)
        self.progress.setVisible(False)

        normalized_rows = self._populate_results(all_results)

        self._append_log("=" * 70)
        self._append_log(f"‚úÖ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù")
        self._append_log(f"üìä –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(normalized_rows)}")
        self._append_log("=" * 70)

        self.save_session_state(partial_results=normalized_rows)
        
    def _on_export_clicked(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Å 2 –∫–æ–ª–æ–Ω–∫–∞–º–∏: –§—Ä–∞–∑–∞ –∏ –ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å"""
        if self.table.rowCount() == 0:
            self._append_log("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            f"parsing_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV Files (*.csv);;All Files (*)"
        )

        if file_path:
            try:
                import csv

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ: —Ñ—Ä–∞–∑–∞ + WS (–∫–æ–ª–æ–Ω–∫–∞ 0 –∏ 1)
                export_data = []
                for row in range(self.table.rowCount()):
                    phrase_item = self.table.item(row, 0)  # –ö–æ–ª–æ–Ω–∫–∞ "–§—Ä–∞–∑–∞"
                    ws_item = self.table.item(row, 1)      # –ö–æ–ª–æ–Ω–∫–∞ "WS"

                    if phrase_item and ws_item:
                        phrase = phrase_item.text()
                        ws_text = ws_item.text()

                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ
                        try:
                            ws_value = int(float(ws_text)) if ws_text else 0
                        except (ValueError, TypeError):
                            ws_value = 0

                        export_data.append({
                            'phrase': phrase,
                            'frequency': ws_value
                        })

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é - —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
                export_data.sort(key=lambda x: x['frequency'], reverse=True)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV —Å TAB —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                # TAB –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –∑–∞–ø—è—Ç–æ–π, —Ç.–∫. –≤ —Ñ—Ä–∞–∑–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø—è—Ç—ã–µ
                with open(file_path, 'w', newline='', encoding='utf-8-sig') as f:
                    writer = csv.writer(f, delimiter='\t', quoting=csv.QUOTE_MINIMAL)

                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ 2 –∫–æ–ª–æ–Ω–∫–∏)
                    writer.writerow(['–§—Ä–∞–∑–∞', '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å'])

                    # –î–∞–Ω–Ω—ã–µ
                    for item in export_data:
                        writer.writerow([item['phrase'], item['frequency']])

                self._append_log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
                self._append_log(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(export_data)} –∑–∞–ø–∏—Å–µ–π")

            except Exception as e:
                self._append_log(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
