# -*- coding: utf-8 -*-
"""
–í–∫–ª–∞–¥–∫–∞ "–ì—Ä—É–ø–ø—ã" - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –≥—Ä—É–ø–ø.
"""

from PySide6.QtWidgets import (
    QWidget, QHBoxLayout, QVBoxLayout,
    QTreeWidget, QTreeWidgetItem, QPushButton,
    QLabel, QComboBox, QGroupBox, QMessageBox,
    QInputDialog, QMenu
)
from PySide6.QtCore import Qt, Signal
from pathlib import Path
import json


class GroupsTab(QWidget):
    """
    –í–∫–ª–∞–¥–∫–∞ "–ì—Ä—É–ø–ø—ã" - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –≥—Ä—É–ø–ø.
    """

    groupSelected = Signal(str)  # –°–∏–≥–Ω–∞–ª –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã

    def __init__(self):
        super().__init__()
        self.setup_ui()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        layout = QHBoxLayout()
        
        # === –õ–ï–í–ê–Ø –ü–ê–ù–ï–õ–¨: –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø ===
        left_panel = self.create_left_panel()
        layout.addWidget(left_panel, stretch=2)
        
        # === –ü–†–ê–í–ê–Ø –ü–ê–ù–ï–õ–¨: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ ===
        right_panel = self.create_right_panel()
        layout.addWidget(right_panel, stretch=1)
        
        self.setLayout(layout)

    def create_left_panel(self):
        """–õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –¥–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø."""
        group = QGroupBox("–î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø")
        layout = QVBoxLayout()
        
        # –î–µ—Ä–µ–≤–æ –≥—Ä—É–ø–ø
        self.groups_tree = QTreeWidget()
        self.groups_tree.setHeaderLabel("–ì—Ä—É–ø–ø—ã")
        self.groups_tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.groups_tree.customContextMenuRequested.connect(self.show_context_menu)
        self.groups_tree.itemClicked.connect(self.on_item_clicked)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        self.create_default_groups()
        
        layout.addWidget(self.groups_tree)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –¥–µ—Ä–µ–≤–æ–º
        btn_layout = QHBoxLayout()
        
        btn_create = QPushButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
        btn_create.clicked.connect(self.create_group)
        btn_layout.addWidget(btn_create)
        
        btn_delete = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        btn_delete.clicked.connect(self.delete_group)
        btn_layout.addWidget(btn_delete)
        
        layout.addLayout(btn_layout)
        
        group.setLayout(layout)
        return group

    def create_right_panel(self):
        """–ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏."""
        group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        lbl_group = QLabel("–ì—Ä—É–ø–ø–∞:")
        layout.addWidget(lbl_group)
        
        self.cmb_group = QComboBox()
        self.cmb_group.addItems(["–í—Å–µ", "–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ", "—á–µ—Ä–Ω–æ–≤—ã–µ", "–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ"])
        self.cmb_group.currentTextChanged.connect(self.on_group_selected)
        layout.addWidget(self.cmb_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_create = QPushButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
        btn_create.clicked.connect(self.create_group)
        layout.addWidget(btn_create)
        
        btn_rename = QPushButton("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        btn_rename.clicked.connect(self.rename_group)
        layout.addWidget(btn_rename)
        
        btn_delete = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        btn_delete.clicked.connect(self.delete_group)
        layout.addWidget(btn_delete)
        
        layout.addSpacing(20)
        
        # –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç
        btn_export = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        btn_export.clicked.connect(self.export_structure)
        layout.addWidget(btn_export)
        
        btn_import = QPushButton("–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        btn_import.clicked.connect(self.import_structure)
        layout.addWidget(btn_import)
        
        layout.addStretch()
        
        group.setLayout(layout)
        return group

    def create_default_groups(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø."""
        root = QTreeWidgetItem(self.groups_tree, ["–í—Å–µ (0)"])
        root.setData(0, Qt.UserRole, "all")
        root.setExpanded(True)
        
        cosmetics = QTreeWidgetItem(root, ["–∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ (0)"])
        cosmetics.setData(0, Qt.UserRole, "cosmetics")
        
        drafts = QTreeWidgetItem(root, ["—á–µ—Ä–Ω–æ–≤—ã–µ (0)"])
        drafts.setData(0, Qt.UserRole, "drafts")
        
        painting = QTreeWidgetItem(root, ["–æ–∫—Ä–∞—Å–æ—á–Ω—ã–µ (0)"])
        painting.setData(0, Qt.UserRole, "painting")

    def show_context_menu(self, position):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ –≥—Ä—É–ø–ø."""
        item = self.groups_tree.itemAt(position)
        
        menu = QMenu(self)
        
        if item:
            # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã
            act_rename = menu.addAction("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
            act_delete = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
            menu.addSeparator()
            act_create_subgroup = menu.addAction("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–≥—Ä—É–ø–ø—É")
        else:
            # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            act_create_group = menu.addAction("üìÅ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
        
        action = menu.exec_(self.groups_tree.mapToGlobal(position))
        
        if action == act_create_subgroup if item else act_create_group:
            self.create_group(item)
        elif item and action == act_delete:
            self.delete_group(item)
        elif item and action == act_rename:
            self.rename_group(item)

    def create_group(self, parent_item=None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã."""
        name, ok = QInputDialog.getText(self, "–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        if ok and name:
            new_item = QTreeWidgetItem([f"{name} (0)"])
            new_item.setData(0, Qt.UserRole, name.lower().replace(" ", "_"))
            
            if parent_item:
                parent_item.addChild(new_item)
                parent_item.setExpanded(True)
            else:
                self.groups_tree.addTopLevelItem(new_item)
            
            # –≠–º–∏—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            parent_id = parent_item.data(0, Qt.UserRole) if parent_item else None
            self.groupSelected.emit(name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
            self.update_counters()

    def delete_group(self, item=None):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã."""
        if not item:
            item = self.groups_tree.currentItem()
        
        if not item:
            return
        
        group_name = item.text(0).split(" (")[0]
        reply = QMessageBox.question(
            self, "–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
            f"–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{group_name}'?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            parent = item.parent()
            if parent:
                parent.removeChild(item)
            else:
                index = self.groups_tree.indexOfTopLevelItem(item)
                self.groups_tree.takeTopLevelItem(index)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
            self.update_counters()

    def rename_group(self, item=None):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã."""
        if not item:
            item = self.groups_tree.currentItem()
        
        if not item:
            return
        
        current_name = item.text(0).split(" (")[0]
        new_name, ok = QInputDialog.getText(
            self, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É",
            "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            text=current_name
        )
        
        if ok and new_name:
            count = item.text(0).split("(")[1].rstrip(")")
            item.setText(0, f"{new_name} ({count})")
            item.setData(0, Qt.UserRole, new_name.lower().replace(" ", "_"))

    def on_item_clicked(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ."""
        group_id = item.data(0, Qt.UserRole)
        self.groupSelected.emit(group_id)
        self.cmb_group.setCurrentText(item.text(0).split(" (")[0])

    def on_group_selected(self, group_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ."""
        # –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ –∏ –≤—ã–¥–µ–ª–∏—Ç—å –µ–≥–æ
        for i in range(self.groups_tree.topLevelItemCount()):
            item = self.groups_tree.topLevelItem(i)
            if item.text(0).split(" (")[0] == group_name:
                self.groups_tree.setCurrentItem(item)
                return
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            if self.find_child_item(item, group_name):
                return

    def find_child_item(self, parent, group_name):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        for i in range(parent.childCount()):
            child = parent.child(i)
            if child.text(0).split(" (")[0] == group_name:
                self.groups_tree.setCurrentItem(child)
                return True
            
            if self.find_child_item(child, group_name):
                return True
        return False

    def update_counters(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ —Ñ—Ä–∞–∑ –≤ –≥—Ä—É–ø–ø–∞—Ö."""
        # TODO: –ü–æ–¥—Å—á–µ—Ç —Ñ—Ä–∞–∑ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        pass

    def export_structure(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø –≤ JSON."""
        structure = self.get_structure()
        
        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        from PySide6.QtWidgets import QFileDialog
        filename, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø",
            "",
            "JSON files (*.json);;All files (*.*)"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(structure, f, ensure_ascii=False, indent=2)
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}")

    def import_structure(self):
        """–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø –∏–∑ JSON."""
        from PySide6.QtWidgets import QFileDialog
        filename, _ = QFileDialog.getOpenFileName(
            self, "–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø",
            "",
            "JSON files (*.json);;All files (*.*)"
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    structure = json.load(f)
                
                # TODO: –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫ –¥–µ—Ä–µ–≤—É
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ {filename}")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}")

    def get_structure(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
        structure = {}
        
        def process_item(item, parent_key=""):
            item_text = item.text(0)
            name = item_text.split(" (")[0]
            count = item_text.split("(")[1].rstrip(")") if "(" in item_text else "0"
            
            key = parent_key + "/" + name if parent_key else name
            structure[key] = {
                "name": name,
                "count": int(count),
                "children": []
            }
            
            for i in range(item.childCount()):
                child = item.child(i)
                structure[key]["children"].append(process_item(child, key))
            
            return structure
        
        for i in range(self.groups_tree.topLevelItemCount()):
            item = self.groups_tree.topLevelItem(i)
            structure.update(process_item(item))
        
        return structure