# -*- coding: utf-8 -*-
"""
MasksTab - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å–∫–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
–í–µ—Ä—Å–∏—è: 4.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π XMind –∏ Smart Multiplier
(—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ –Ω–æ–≤–æ–µ/–ö–ï–ô–°–ï–¢/–ú–∞—Å–∫–∏/MASKSTAB_FULL_CODE.md)
"""
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
    QTextEdit, QTableWidget, QTableWidgetItem, QSpinBox, QComboBox,
    QTabWidget, QTreeWidget, QTreeWidgetItem, QFileDialog, QMessageBox,
    QGroupBox, QCheckBox, QListWidget, QListWidgetItem, QProgressBar
)
from PySide6.QtCore import Qt
from pathlib import Path
import json
import pyperclip

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å core/services, –∏–Ω–∞—á–µ –∑–∞–≥–ª—É—à–∫–∏
try:
    from keyset.core.xmind_parser import XMindParser
except Exception:
    try:
        from core.xmind_parser import XMindParser  # –Ω–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–æ–≥–æ PYTHONPATH
    except Exception:
        class XMindParser:
            def __init__(self, path: str) -> None:
                self.path = path
            def parse(self) -> dict:
                # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
                return {
                    'title': Path(self.path).stem,
                    'branches': [
                        {'title': '–∫—É–ø–∏—Ç—å', 'type': 'CORE', 'weight': 1.0, 'active': True, 'children': []}
                    ],
                }

try:
    from keyset.services.keyword_multiplier import KeywordMultiplier
except Exception:
    try:
        from services.keyword_multiplier import KeywordMultiplier
    except Exception:
        class KeywordMultiplier:
            def multiply(self, tree_data: dict, max_kw: int = 1000):
                # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∑–ª–æ–≤ CORE
                results = []
                def walk(nodes):
                    for n in nodes:
                        kw = n.get('title', '').strip()
                        if kw:
                            results.append({'keyword': kw, 'intent': 'INFORMATIONAL', 'score': 0.5, 'original': kw})
                        walk(n.get('children', []))
                walk(tree_data.get('branches', []))
                # –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                uniq = []
                seen = set()
                for r in results:
                    k = r['keyword']
                    if k not in seen:
                        uniq.append(r)
                        seen.add(k)
                return uniq[:max_kw]


class MasksTab(QWidget):
    """–ì–ª–∞–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å–∫–∞–º–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""

    def __init__(self, parent=None, send_to_parsing_callback=None):
        super().__init__(parent)
        self.parent = parent
        self._send_cb = send_to_parsing_callback

        self.xmind_data = None
        self.multiplier_results = None

        self.masks_table = None
        self.groups_list = None

        self.init_ui()

    def init_ui(self):
        main_layout = QHBoxLayout()

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å –ø–æ–¥–≤–∫–ª–∞–¥–∫–∞–º–∏
        left_widget = QWidget()
        left_layout = QVBoxLayout()

        self.masks_subtabs = QTabWidget()
        tab_standard = self._create_standard_masks_tab()
        self.masks_subtabs.addTab(tab_standard, "üìã –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥")

        tab_xmind = self._create_xmind_reader_tab()
        self.masks_subtabs.addTab(tab_xmind, "üå≥ XMind Reader")

        tab_multiplier = self._create_multiplier_tab()
        self.masks_subtabs.addTab(tab_multiplier, "üß¨ Multiplier")

        left_layout.addWidget(self.masks_subtabs)
        left_widget.setLayout(left_layout)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–ì—Ä—É–ø–ø—ã) ‚Äî –∑–∞–≥–ª—É—à–∫–∞, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        right_widget = QWidget()
        right_layout = QVBoxLayout()
        right_layout.addWidget(QLabel("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏</b>"))
        self.groups_list = QListWidget()
        self.groups_list.addItem("–ì—Ä—É–ø–ø–∞ 1")
        right_layout.addWidget(self.groups_list)
        right_widget.setLayout(right_layout)
        right_widget.setMaximumWidth(250)

        center_splitter = QHBoxLayout()
        center_splitter.addWidget(left_widget, 4)
        center_splitter.addWidget(right_widget, 1)
        main_layout.addLayout(center_splitter)

        self.setLayout(main_layout)

    # TAB 1: –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥
    def _create_standard_masks_tab(self):
        widget = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel("<b>–ò—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Å–∫–∏</b>"))
        self.masks_input = QTextEdit()
        self.masks_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É‚Ä¶")
        self.masks_input.setMinimumHeight(80)
        layout.addWidget(self.masks_input)

        buttons_layout = QHBoxLayout()
        btn_normalize = QPushButton("–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å")
        btn_normalize.clicked.connect(self.on_normalize)
        buttons_layout.addWidget(btn_normalize)
        btn_intersect = QPushButton("–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (—Ü–µ–Ω–æ–≤–∏–∫)")
        btn_intersect.clicked.connect(self.on_intersect)
        buttons_layout.addWidget(btn_intersect)
        btn_to_parsing = QPushButton("–ü–µ—Ä–µ—Å–µ—á—å –≤ –ü–∞—Ä—Å–∏–Ω–≥")
        btn_to_parsing.clicked.connect(self.on_send_to_parsing)
        buttons_layout.addWidget(btn_to_parsing)
        layout.addLayout(buttons_layout)

        layout.addWidget(QLabel("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>"))
        self.masks_table = QTableWidget()
        self.masks_table.setColumnCount(3)
        self.masks_table.setHorizontalHeaderLabels([
            "–°—Ç–æ–ø-—Å–ª–æ–≤–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å", "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –ü–∞—Ä—Å–∏–Ω–≥"
        ])
        self.masks_table.setMaximumHeight(200)
        layout.addWidget(self.masks_table)

        result_buttons = QHBoxLayout()
        result_buttons.addWidget(QPushButton("–û—á–∏—Å—Ç–∏—Ç—å"))
        result_buttons.addWidget(QPushButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ"))
        result_buttons.addWidget(QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
        result_buttons.addWidget(QPushButton("–ü–∞—É–∑–∞ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞"))
        layout.addLayout(result_buttons)

        layout.addStretch()
        widget.setLayout(layout)
        return widget

    def on_normalize(self):
        text = self.masks_input.toPlainText()
        if not text:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫–∏")
            return
        lines = [ln.strip() for ln in text.strip().split('\n') if ln.strip()]
        self.masks_table.setRowCount(len(lines))
        for i, line in enumerate(lines):
            self.masks_table.setItem(i, 0, QTableWidgetItem(line))
            self.masks_table.setItem(i, 1, QTableWidgetItem("‚úì"))
            self.masks_table.setItem(i, 2, QTableWidgetItem(""))

    def on_intersect(self):
        if self.masks_table.rowCount() == 0:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞—Å–∫–∏")
            return
        QMessageBox.information(self, "‚úÖ", "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–µ–º–æ)")

    def on_send_to_parsing(self):
        if self.masks_table.rowCount() == 0:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–ù–µ—Ç –º–∞—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –±—É—Ñ–µ—Ä
        phrases = []
        for r in range(self.masks_table.rowCount()):
            item = self.masks_table.item(r, 0)
            if item and item.text().strip():
                phrases.append(item.text().strip())
        if phrases and callable(self._send_cb):
            self._send_cb(phrases)
            QMessageBox.information(self, "‚úÖ", f"–ú–∞—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ü–∞—Ä—Å–∏–Ω–≥: {len(phrases)}")

    # TAB 2: XMind Reader
    def _create_xmind_reader_tab(self):
        widget = QWidget()
        layout = QVBoxLayout()
        btn_load = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å XMind")
        btn_load.clicked.connect(self.on_load_xmind)
        layout.addWidget(btn_load)
        self.xmind_info = QLabel("üîÑ –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        self.xmind_info.setStyleSheet("background:#f0f0f0;padding:5px;border-radius:3px;")
        layout.addWidget(self.xmind_info)
        self.xmind_tree = QTreeWidget()
        self.xmind_tree.setHeaderLabels(["üìå –≠–ª–µ–º–µ–Ω—Ç", "üî∑ –¢–∏–ø", "‚öñÔ∏è –í–µ—Å"])
        self.xmind_tree.setColumnCount(3)
        layout.addWidget(self.xmind_tree)
        ctrl = QHBoxLayout()
        btn_send = QPushButton("‚û°Ô∏è –ü–µ—Ä–µ–¥–∞—Ç—å –≤–æ –º–Ω–æ–∂–∏—Ç–µ–ª—å")
        btn_send.clicked.connect(self.on_xmind_to_multiplier)
        ctrl.addWidget(btn_send)
        btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
        btn_save.clicked.connect(self.on_save_xmind_config)
        ctrl.addWidget(btn_save)
        layout.addLayout(ctrl)
        widget.setLayout(layout)
        return widget

    def on_load_xmind(self):
        path, _ = QFileDialog.getOpenFileName(self, "–í—ã–±—Ä–∞—Ç—å XMind —Ñ–∞–π–ª", "", "XMind (*.xmind)")
        if not path:
            return
        try:
            parser = XMindParser(path)
            self.xmind_data = parser.parse()
            self._display_xmind_tree()
            self.xmind_info.setText(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{self.xmind_data['title']}</b>")
            self.xmind_info.setStyleSheet("background:#c8e6c9;padding:5px;border-radius:3px;")
        except Exception as e:
            QMessageBox.critical(self, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", f"–û—à–∏–±–∫–∞: {e}")

    def _display_xmind_tree(self):
        """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å XMind –¥–µ—Ä–µ–≤–æ —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ)"""
        self.xmind_tree.clear()
        if not self.xmind_data:
            return
        branches = self.xmind_data.get('branches', [])
        if not branches:
            item = QTreeWidgetItem(self.xmind_tree)
            item.setText(0, "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        def add_branch_recursive(parent_item, branch_list):
            for branch in branch_list:
                type_name = branch.get('type', 'CORE')
                # –∏–∫–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ self._get_type_icon
                tree_item = QTreeWidgetItem(parent_item) if parent_item else QTreeWidgetItem(self.xmind_tree)
                tree_item.setText(0, f"{branch.get('title','')}")
                tree_item.setText(1, type_name)
                weight_percent = int(branch.get('weight', 1.0) * 100)
                tree_item.setText(2, f"{weight_percent}%")
                children = branch.get('children', [])
                if children:
                    add_branch_recursive(tree_item, children)
        add_branch_recursive(None, branches)
        self.xmind_tree.expandAll()

    def _count_tree_items(self, branches):
        count = len(branches)
        for b in branches:
            count += self._count_tree_items(b.get('children', []))
        return count

    def on_xmind_to_multiplier(self):
        if not self.xmind_data:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–ó–∞–≥—Ä—É–∑–∏—Ç–µ XMind —Ñ–∞–π–ª")
            return
        self.masks_subtabs.setCurrentIndex(2)

    def on_save_xmind_config(self):
        if not self.xmind_data:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", "", "JSON (*.json)")
        if path:
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(self.xmind_data, f, ensure_ascii=False, indent=2)
            QMessageBox.information(self, "‚úÖ", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {path}")

    # TAB 3: Multiplier
    def _create_multiplier_tab(self):
        widget = QWidget()
        layout = QHBoxLayout()
        left = QVBoxLayout()
        left.addWidget(QLabel("<b>‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>"))
        left.addWidget(QLabel("–ú–∞–∫—Å. –º–∞—Å–æ–∫:"))
        self.multiplier_max_kw = QSpinBox()
        self.multiplier_max_kw.setRange(100, 500000)
        self.multiplier_max_kw.setValue(10000)
        self.multiplier_max_kw.setSingleStep(1000)
        left.addWidget(self.multiplier_max_kw)
        btn_generate = QPushButton("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å–∫–∏")
        btn_generate.clicked.connect(self.on_multiplier_generate)
        left.addWidget(btn_generate)
        left.addStretch()
        center = QVBoxLayout()
        center.addWidget(QLabel("<b>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–º–Ω–æ–∂–µ–Ω–∏—è:</b>"))
        self.multiplier_table = QTableWidget()
        self.multiplier_table.setColumnCount(4)
        self.multiplier_table.setHorizontalHeaderLabels(["üîë –ú–∞—Å–∫–∞", "üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ", "‚≠ê Score", "üìù –û—Ä–∏–≥–∏–Ω–∞–ª"])
        center.addWidget(self.multiplier_table)
        export = QHBoxLayout()
        btn_copy = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä")
        btn_copy.clicked.connect(self.on_multiplier_copy)
        export.addWidget(btn_copy)
        btn_export_txt = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç TXT")
        btn_export_txt.clicked.connect(self.on_multiplier_export_txt)
        export.addWidget(btn_export_txt)
        center.addLayout(export)
        layout.addLayout(left, 1)
        layout.addLayout(center, 3)
        widget.setLayout(layout)
        return widget

    def on_multiplier_generate(self):
        if not self.xmind_data:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ XMind —Ñ–∞–π–ª –≤ 'XMind Reader'")
            return
        multiplier = KeywordMultiplier()
        results = multiplier.multiply(self.xmind_data, max_kw=self.multiplier_max_kw.value())
        self.multiplier_results = results
        self.multiplier_table.setRowCount(len(results))
        for i, r in enumerate(results):
            self.multiplier_table.setItem(i, 0, QTableWidgetItem(r.get('keyword','')))
            self.multiplier_table.setItem(i, 1, QTableWidgetItem(r.get('intent','')))
            self.multiplier_table.setItem(i, 2, QTableWidgetItem(f"{r.get('score',0):.2f}"))
            self.multiplier_table.setItem(i, 3, QTableWidgetItem(r.get('original','')))

    def on_multiplier_copy(self):
        if not self.multiplier_results:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        text = '\n'.join([r['keyword'] for r in self.multiplier_results])
        pyperclip.copy(text)
        QMessageBox.information(self, "‚úÖ", f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(self.multiplier_results)} –º–∞—Å–æ–∫")

    def on_multiplier_export_txt(self):
        if not self.multiplier_results:
            QMessageBox.warning(self, "‚ö†Ô∏è", "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å–∫–∏", "", "Text (*.txt)")
        if path:
            with open(path, 'w', encoding='utf-8') as f:
                for r in self.multiplier_results:
                    f.write(r['keyword'] + '\n')
            QMessageBox.information(self, "‚úÖ", f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.multiplier_results)} –º–∞—Å–æ–∫")

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    def log_message(self, message: str):
        if hasattr(self.parent, 'log_message'):
            self.parent.log_message(message)

    def send_to_parsing(self, phrases: list[str]):
        if callable(self._send_cb):
            self._send_cb(phrases)
