"""
–¢–£–†–ë–û –ü–ê–†–°–ï–† TAB - GUI –≤–∫–ª–∞–¥–∫–∞ –¥–ª—è —Ç—É—Ä–±–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∫ –≤ DirectParser —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–æ–≥–æ–≤
"""

import asyncio
import threading
import time
from pathlib import Path
from datetime import datetime
import json

from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QLabel,
    QPushButton, QTextEdit, QTableWidget, QTableWidgetItem,
    QCheckBox, QSpinBox, QComboBox, QFileDialog, QMessageBox,
    QHeaderView, QRadioButton, QButtonGroup, QLineEdit
)

from ..services.accounts import AccountsService
from ..workers.turbo_parser_integration import TurboWordstatParser


class TurboParserTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ —Ç—É—Ä–±–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–∞–∫ –≤ DirectParser"""
    
    def __init__(self, parent, db):
        super().__init__(parent)
        self.db = db
        self.accounts_service = AccountsService(db)
        self.parser = None
        self.parsing_thread = None
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏"""
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.LabelFrame(self, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–æ–º", padding=10)
        control_frame.pack(fill="x", padx=5, pady=5)
        
        # –°—Ç—Ä–æ–∫–∞ 1: –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        row1 = ttk.Frame(control_frame)
        row1.pack(fill="x", pady=2)
        
        ttk.Label(row1, text="–ê–∫–∫–∞—É–Ω—Ç—ã:").pack(side="left", padx=(0, 5))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        acc_frame = ttk.Frame(row1)
        acc_frame.pack(side="left", fill="x", expand=True)
        
        self.accounts_tree = ttk.Treeview(acc_frame, columns=("proxy", "status"), height=5)
        self.accounts_tree.heading("#0", text="–ê–∫–∫–∞—É–Ω—Ç")
        self.accounts_tree.heading("proxy", text="–ü—Ä–æ–∫—Å–∏")
        self.accounts_tree.heading("status", text="–°—Ç–∞—Ç—É—Å")
        self.accounts_tree.column("#0", width=150)
        self.accounts_tree.column("proxy", width=200)
        self.accounts_tree.column("status", width=100)
        self.accounts_tree.pack(side="left", fill="both", expand=True)
        
        acc_scroll = ttk.Scrollbar(acc_frame, orient="vertical", command=self.accounts_tree.yview)
        acc_scroll.pack(side="right", fill="y")
        self.accounts_tree.configure(yscrollcommand=acc_scroll.set)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        acc_buttons = ttk.Frame(row1)
        acc_buttons.pack(side="left", padx=5)
        
        ttk.Button(acc_buttons, text="–û–±–Ω–æ–≤–∏—Ç—å", command=self.load_accounts).pack(pady=2)
        ttk.Button(acc_buttons, text="–ê–≤—Ç–æ–ª–æ–≥–∏–Ω", command=self.auto_login).pack(pady=2)
        
        # –°—Ç—Ä–æ–∫–∞ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        row2 = ttk.Frame(control_frame)
        row2.pack(fill="x", pady=5)
        
        ttk.Label(row2, text="–†–µ–∂–∏–º:").pack(side="left", padx=(0, 5))
        self.mode_var = tk.StringVar(value="turbo")
        modes = [
            ("–¢—É—Ä–±–æ (195 —Ñ—Ä–∞–∑/–º–∏–Ω)", "turbo"),
            ("–ë—ã—Å—Ç—Ä—ã–π (100 —Ñ—Ä–∞–∑/–º–∏–Ω)", "fast"),
            ("–û–±—ã—á–Ω—ã–π (20 —Ñ—Ä–∞–∑/–º–∏–Ω)", "normal")
        ]
        for text, value in modes:
            ttk.Radiobutton(row2, text=text, variable=self.mode_var, value=value).pack(side="left", padx=5)
        
        ttk.Label(row2, text="–†–µ–≥–∏–æ–Ω:").pack(side="left", padx=(20, 5))
        self.region_var = tk.StringVar(value="225")
        region_entry = ttk.Entry(row2, textvariable=self.region_var, width=10)
        region_entry.pack(side="left")
        
        ttk.Label(row2, text="–ü–æ—Ç–æ–∫–æ–≤:").pack(side="left", padx=(20, 5))
        self.threads_var = tk.IntVar(value=1)
        threads_spin = ttk.Spinbox(row2, from_=1, to=10, textvariable=self.threads_var, width=5)
        threads_spin.pack(side="left")
        
        self.headless_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(row2, text="–§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º", variable=self.headless_var).pack(side="left", padx=20)
        
        # –°—Ç—Ä–æ–∫–∞ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑
        row3 = ttk.Frame(control_frame)
        row3.pack(fill="x", pady=5)
        
        ttk.Label(row3, text="–§—Ä–∞–∑—ã:").pack(side="left", padx=(0, 5))
        ttk.Button(row3, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", command=self.load_phrases).pack(side="left", padx=5)
        ttk.Button(row3, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_phrases).pack(side="left", padx=5)
        
        self.phrases_count = ttk.Label(row3, text="0 —Ñ—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        self.phrases_count.pack(side="left", padx=20)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ—Ä–∞–∑
        phrases_frame = ttk.LabelFrame(self, text="–§—Ä–∞–∑—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞", padding=5)
        phrases_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        self.phrases_text = scrolledtext.ScrolledText(phrases_frame, height=10, width=80)
        self.phrases_text.pack(fill="both", expand=True)
        
        # –ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ (–∫–∞–∫ –≤ DirectParser)
        logs_frame = ttk.LabelFrame(self, text="–õ–æ–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞", padding=5)
        logs_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤
        columns = ("time", "account", "phrase", "frequency", "status", "speed")
        self.logs_tree = ttk.Treeview(logs_frame, columns=columns, show="headings", height=15)
        
        self.logs_tree.heading("time", text="–í—Ä–µ–º—è")
        self.logs_tree.heading("account", text="–ê–∫–∫–∞—É–Ω—Ç")
        self.logs_tree.heading("phrase", text="–§—Ä–∞–∑–∞")
        self.logs_tree.heading("frequency", text="–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å")
        self.logs_tree.heading("status", text="–°—Ç–∞—Ç—É—Å")
        self.logs_tree.heading("speed", text="–°–∫–æ—Ä–æ—Å—Ç—å")
        
        self.logs_tree.column("time", width=100)
        self.logs_tree.column("account", width=100)
        self.logs_tree.column("phrase", width=200)
        self.logs_tree.column("frequency", width=100)
        self.logs_tree.column("status", width=80)
        self.logs_tree.column("speed", width=100)
        
        self.logs_tree.pack(side="left", fill="both", expand=True)
        
        logs_scroll = ttk.Scrollbar(logs_frame, orient="vertical", command=self.logs_tree.yview)
        logs_scroll.pack(side="right", fill="y")
        self.logs_tree.configure(yscrollcommand=logs_scroll.set)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        stats_frame = ttk.Frame(self)
        stats_frame.pack(fill="x", padx=5, pady=5)
        
        self.stats_label = ttk.Label(stats_frame, 
            text="–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 | –£—Å–ø–µ—à–Ω–æ: 0 | –û—à–∏–±–æ–∫: 0 | –°–∫–æ—Ä–æ—Å—Ç—å: 0 —Ñ—Ä–∞–∑/–º–∏–Ω | –í—Ä–µ–º—è: 00:00:00")
        self.stats_label.pack(side="left")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(self)
        buttons_frame.pack(fill="x", padx=5, pady=5)
        
        self.start_btn = ttk.Button(buttons_frame, text="‚ñ∂ –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–ê–†–°–ò–ù–ì", 
                                    command=self.start_parsing, style="Accent.TButton")
        self.start_btn.pack(side="left", padx=5)
        
        self.stop_btn = ttk.Button(buttons_frame, text="‚èπ –û–°–¢–ê–ù–û–í–ò–¢–¨", 
                                   command=self.stop_parsing, state="disabled")
        self.stop_btn.pack(side="left", padx=5)
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
                  command=self.save_results).pack(side="left", padx=5)
        
        ttk.Button(buttons_frame, text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", 
                  command=self.export_csv).pack(side="left", padx=5)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        self.load_accounts()
        self.phrases = []
        
    def load_accounts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        self.accounts_tree.delete(*self.accounts_tree.get_children())
        
        accounts = self.accounts_service.get_all()
        for acc in accounts:
            proxy = acc.proxy if acc.proxy else "–ë–µ–∑ –ø—Ä–æ–∫—Å–∏"
            status = acc.status if acc.status else "ok"
            
            self.accounts_tree.insert("", "end", 
                                     text=acc.name,
                                     values=(proxy, status))
    
    def auto_login(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥–∏–Ω —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        selected = self.accounts_tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞")
            return
        
        account_name = self.accounts_tree.item(selected[0])["text"]
        
        # –î–∏–∞–ª–æ–≥ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        dialog = tk.Toplevel(self)
        dialog.title("–ê–≤—Ç–æ–ª–æ–≥–∏–Ω")
        dialog.geometry("400x200")
        
        ttk.Label(dialog, text=f"–õ–æ–≥–∏–Ω –≤ –∞–∫–∫–∞—É–Ω—Ç: {account_name}").pack(pady=10)
        ttk.Label(dialog, text="–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å:").pack(pady=5)
        
        answer_var = tk.StringVar()
        ttk.Entry(dialog, textvariable=answer_var, width=40).pack(pady=10)
        
        def start_login():
            answer = answer_var.get()
            dialog.destroy()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ª–æ–≥–∏–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.add_log("", account_name, "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞...", "", "‚è≥", "")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Playwright
            
        ttk.Button(dialog, text="–ù–∞—á–∞—Ç—å –ª–æ–≥–∏–Ω", command=start_login).pack(pady=10)
        
    def load_phrases(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        
        if filename:
            with open(filename, "r", encoding="utf-8") as f:
                content = f.read()
                self.phrases_text.delete("1.0", "end")
                self.phrases_text.insert("1.0", content)
                
            lines = content.strip().split("\n")
            self.phrases = [line.strip() for line in lines if line.strip()]
            self.phrases_count.config(text=f"{len(self.phrases)} —Ñ—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    def clear_phrases(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑"""
        self.phrases_text.delete("1.0", "end")
        self.phrases = []
        self.phrases_count.config(text="0 —Ñ—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    def add_log(self, time_str, account, phrase, frequency, status, speed):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥"""
        if not time_str:
            time_str = datetime.now().strftime("%H:%M:%S")
        
        self.logs_tree.insert("", 0, values=(
            time_str, account, phrase, frequency, status, speed
        ))
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
        children = self.logs_tree.get_children()
        if len(children) > 1000:
            self.logs_tree.delete(children[-1])
    
    def update_stats(self, processed, success, errors, speed, elapsed):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        hours, remainder = divmod(int(elapsed), 3600)
        minutes, seconds = divmod(remainder, 60)
        time_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        
        self.stats_label.config(
            text=f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} | –£—Å–ø–µ—à–Ω–æ: {success} | "
                 f"–û—à–∏–±–æ–∫: {errors} | –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ—Ä–∞–∑/–º–∏–Ω | "
                 f"–í—Ä–µ–º—è: {time_str}"
        )
    
    async def run_parser_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        selected = self.accounts_tree.selection()
        if not selected:
            account = None
        else:
            account_name = self.accounts_tree.item(selected[0])["text"]
            account = self.accounts_service.get_by_name(account_name)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        headless = self.headless_var.get()
        self.parser = TurboWordstatParser(account=account, headless=headless)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
        mode = self.mode_var.get()
        if mode == "turbo":
            self.parser.num_tabs = 10
        elif mode == "fast":
            self.parser.num_tabs = 5
        else:
            self.parser.num_tabs = 1
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            results = await self.parser.parse_batch(self.phrases)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            for result in results:
                self.add_log(
                    "",
                    account.name if account else "default",
                    result['query'],
                    f"{result['frequency']:,}",
                    "‚úì",
                    f"{self.parser.total_processed / (time.time() - self.parser.start_time) * 60:.1f}"
                )
            
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Ñ—Ä–∞–∑")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
            
        finally:
            await self.parser.close()
            self.parser = None
    
    def parsing_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        asyncio.run(self.run_parser_async())
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
    
    def start_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        content = self.phrases_text.get("1.0", "end").strip()
        if not content:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return
        
        self.phrases = [line.strip() for line in content.split("\n") if line.strip()]
        
        if not self.phrases:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –ø—É—Å—Ç")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        
        # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
        self.logs_tree.delete(*self.logs_tree.get_children())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.parsing_thread = threading.Thread(target=self.parsing_worker)
        self.parsing_thread.daemon = True
        self.parsing_thread.start()
        
        self.add_log("", "", f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(self.phrases)} —Ñ—Ä–∞–∑...", "", "üöÄ", "")
    
    def stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if self.parser:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å graceful shutdown
            pass
        
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")
        
        self.add_log("", "", "–ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "", "‚èπ", "")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î"""
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ parse_batch
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
    
    def export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if filename:
            import csv
            
            with open(filename, "w", encoding="utf-8-sig", newline="") as f:
                writer = csv.writer(f, delimiter=";")
                writer.writerow(["–§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å", "–†–µ–≥–∏–æ–Ω", "–í—Ä–µ–º—è"])
                
                for child in self.logs_tree.get_children():
                    values = self.logs_tree.item(child)["values"]
                    if len(values) >= 4 and values[4] == "‚úì":
                        writer.writerow([
                            values[2],  # phrase
                            values[3].replace(",", ""),  # frequency
                            self.region_var.get(),  # region
                            values[0]  # time
                        ])
            
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
