"""
Full Pipeline Tab - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ Wordstat + Direct + –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
"""

import csv
from datetime import datetime
from pathlib import Path

from PySide6.QtCore import Qt
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QLabel,
    QPushButton, QTableWidget, QTableWidgetItem, QFileDialog,
    QMessageBox, QHeaderView, QPlainTextEdit, QProgressBar,
    QLineEdit
)

from ..workers.full_pipeline_worker import FullPipelineWorkerThread


class FullPipelineTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ Full Pipeline: Wordstat ‚Üí Direct ‚Üí Clustering ‚Üí Export"""
    
    def __init__(self):
        super().__init__()
        self.worker_thread = None
        self.results = []
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        control_group = QGroupBox("Full Pipeline: Wordstat ‚Üí Direct ‚Üí –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è")
        control_layout = QVBoxLayout()
        
        # –°—Ç—Ä–æ–∫–∞ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑
        row1 = QHBoxLayout()
        row1.addWidget(QLabel("–§—Ä–∞–∑—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:"))
        
        self.load_btn = QPushButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞")
        self.load_btn.clicked.connect(self.load_phrases)
        row1.addWidget(self.load_btn)
        
        self.clear_btn = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_btn.clicked.connect(self.clear_phrases)
        row1.addWidget(self.clear_btn)
        
        self.count_label = QLabel("0 —Ñ—Ä–∞–∑")
        row1.addWidget(self.count_label)
        
        row1.addWidget(QLabel("–†–µ–≥–∏–æ–Ω:"))
        self.region_input = QLineEdit("225")
        self.region_input.setMaximumWidth(60)
        row1.addWidget(self.region_input)
        
        row1.addStretch()
        control_layout.addLayout(row1)
        
        # –°—Ç—Ä–æ–∫–∞ 2: –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        row2 = QHBoxLayout()
        
        self.start_btn = QPushButton("üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ FULL PIPELINE")
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                font-weight: bold;
                font-size: 14px;
                padding: 12px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #cccccc;
            }
        """)
        self.start_btn.clicked.connect(self.start_pipeline)
        row2.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("‚èπ –û–°–¢–ê–ù–û–í–ò–¢–¨")
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                font-weight: bold;
                padding: 12px;
            }
        """)
        self.stop_btn.clicked.connect(self.stop_pipeline)
        row2.addWidget(self.stop_btn)
        
        self.export_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç CSV")
        self.export_btn.clicked.connect(self.export_csv)
        row2.addWidget(self.export_btn)
        
        row2.addStretch()
        control_layout.addLayout(row2)
        
        control_group.setLayout(control_layout)
        layout.addWidget(control_group)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ñ—Ä–∞–∑
        phrases_group = QGroupBox("–§—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
        phrases_layout = QVBoxLayout()
        
        self.phrases_text = QPlainTextEdit()
        self.phrases_text.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ—Ä–∞–∑—ã...\n–ü—Ä–∏–º–µ—Ä:\n–∫—É–ø–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω\n–∫—É–ø–∏—Ç—å iphone\n–∫—É–ø–∏—Ç—å samsung")
        self.phrases_text.setMaximumHeight(120)
        phrases_layout.addWidget(self.phrases_text)
        
        phrases_group.setLayout(phrases_layout)
        layout.addWidget(phrases_group)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress_group = QGroupBox("–ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_layout = QVBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setTextVisible(True)
        progress_layout.addWidget(self.progress_bar)
        
        self.progress_label = QLabel("–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        progress_layout.addWidget(self.progress_label)
        
        progress_group.setLayout(progress_layout)
        layout.addWidget(progress_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ù–û–í–´–ú–ò –∫–æ–ª–æ–Ω–∫–∞–º–∏
        results_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Full Pipeline")
        results_layout = QVBoxLayout()
        
        self.results_table = QTableWidget(0, 8)
        self.results_table.setHorizontalHeaderLabels([
            "–í—Ä–µ–º—è", "–§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å", "CPC (‚ÇΩ)", "–ü–æ–∫–∞–∑—ã", "–ë—é–¥–∂–µ—Ç (‚ÇΩ)", "–ì—Ä—É–ø–ø–∞", "–°—Ç–∞—Ç—É—Å"
        ])
        
        header = self.results_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)
        header.resizeSection(0, 80)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Fixed)
        header.resizeSection(2, 100)
        header.setSectionResizeMode(3, QHeaderView.Fixed)
        header.resizeSection(3, 80)
        header.setSectionResizeMode(4, QHeaderView.Fixed)
        header.resizeSection(4, 90)
        header.setSectionResizeMode(5, QHeaderView.Fixed)
        header.resizeSection(5, 100)
        header.setSectionResizeMode(6, QHeaderView.Fixed)
        header.resizeSection(6, 120)
        header.setSectionResizeMode(7, QHeaderView.Fixed)
        header.resizeSection(7, 60)
        
        results_layout.addWidget(self.results_table)
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
        self.stats_label = QLabel(
            "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 | –£—Å–ø–µ—à–Ω–æ: 0 | –°–∫–æ—Ä–æ—Å—Ç—å: 0 —Ñ—Ä–∞–∑/–º–∏–Ω | –í—Ä–µ–º—è: 00:00"
        )
        layout.addWidget(self.stats_label)
        
    def load_phrases(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞"""
        filename, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —Ñ—Ä–∞–∑–∞–º–∏", "", "Text files (*.txt);;All files (*.*)"
        )
        
        if filename:
            with open(filename, "r", encoding="utf-8") as f:
                content = f.read()
                self.phrases_text.setPlainText(content)
            
            lines = content.strip().split("\n")
            phrases = [line.strip() for line in lines if line.strip()]
            self.count_label.setText(f"{len(phrases)} —Ñ—Ä–∞–∑")
    
    def clear_phrases(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ—Ä–∞–∑"""
        self.phrases_text.clear()
        self.count_label.setText("0 —Ñ—Ä–∞–∑")
    
    def start_pipeline(self):
        """–ó–∞–ø—É—Å–∫ Full Pipeline"""
        content = self.phrases_text.toPlainText().strip()
        if not content:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–î–æ–±–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return
        
        phrases = [line.strip() for line in content.split("\n") if line.strip()]
        if not phrases:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –ø—É—Å—Ç")
            return
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.results_table.setRowCount(0)
        self.results = []
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º worker
        region = int(self.region_input.text()) if self.region_input.text().isdigit() else 225
        self.worker_thread = FullPipelineWorkerThread(phrases, region=region)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.worker_thread.log_signal.connect(self.add_log_row)
        self.worker_thread.log_message.connect(self.on_log_message)
        self.worker_thread.error_signal.connect(self.on_error)
        self.worker_thread.progress_signal.connect(self.on_progress)
        self.worker_thread.stats_signal.connect(self.on_stats)
        self.worker_thread.finished_signal.connect(self.on_finished)
        self.worker_thread.results_ready.connect(self.on_results_ready)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        self.worker_thread.start()
        
        self.progress_label.setText(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ {len(phrases)} —Ñ—Ä–∞–∑...")
    
    def stop_pipeline(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if self.worker_thread:
            self.worker_thread.cancel()
            self.worker_thread.quit()
            self.worker_thread.wait()
        
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_label.setText("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    def add_log_row(self, time_str, phrase, freq, cpc, impressions, budget, stem, status):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.results_table.rowCount()
        self.results_table.insertRow(row)
        
        self.results_table.setItem(row, 0, QTableWidgetItem(time_str))
        self.results_table.setItem(row, 1, QTableWidgetItem(phrase))
        self.results_table.setItem(row, 2, QTableWidgetItem(freq))
        self.results_table.setItem(row, 3, QTableWidgetItem(cpc))
        self.results_table.setItem(row, 4, QTableWidgetItem(impressions))
        self.results_table.setItem(row, 5, QTableWidgetItem(budget))
        self.results_table.setItem(row, 6, QTableWidgetItem(stem))
        self.results_table.setItem(row, 7, QTableWidgetItem(status))
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        self.results_table.scrollToBottom()
    
    def on_log_message(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.progress_label.setText(message)
    
    def on_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error)
    
    def on_progress(self, current, total, stage):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if total > 0:
            percent = int(current / total * 100)
            self.progress_bar.setValue(percent)
            self.progress_label.setText(f"{stage}: {current}/{total} ({percent}%)")
    
    def on_stats(self, processed, success, errors, speed, elapsed):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        mins, secs = divmod(int(elapsed), 60)
        self.stats_label.setText(
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} | –£—Å–ø–µ—à–Ω–æ: {success} | "
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ—Ä–∞–∑/–º–∏–Ω | –í—Ä–µ–º—è: {mins:02d}:{secs:02d}"
        )
    
    def on_results_ready(self, results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results = results
    
    def on_finished(self, success, message):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress_bar.setValue(100 if success else 0)
        
        if success:
            QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", message)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", message)
    
    def export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        if not self.results:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        filename, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", 
            f"results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            "CSV files (*.csv);;All files (*.*)"
        )
        
        if filename:
            with open(filename, "w", encoding="utf-8", newline="") as f:
                writer = csv.writer(f, delimiter=";")
                writer.writerow([
                    "–§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å", "CPC", "–ü–æ–∫–∞–∑—ã", "–ë—é–¥–∂–µ—Ç", 
                    "–ì—Ä—É–ø–ø–∞", "–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", "–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –≥—Ä—É–ø–ø—ã", "–û–±—â–∏–π –±—é–¥–∂–µ—Ç –≥—Ä—É–ø–ø—ã"
                ])
                
                for item in self.results:
                    writer.writerow([
                        item.get('phrase', ''),
                        item.get('freq', 0),
                        item.get('cpc', 0),
                        item.get('impressions', 0),
                        item.get('budget', 0),
                        item.get('stem', ''),
                        item.get('group_size', 1),
                        round(item.get('group_avg_freq', 0), 2),
                        round(item.get('group_total_budget', 0), 2),
                    ])
            
            QMessageBox.information(
                self, "–ì–æ—Ç–æ–≤–æ", 
                f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.results)} –∑–∞–ø–∏—Å–µ–π –≤ {filename}"
            )
