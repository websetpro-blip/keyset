#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TurboParserGUI —Å IntegrationService –∏ GUI
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ keyset –≤ sys.path
keyset_path = Path(__file__).parent
if str(keyset_path) not in sys.path:
    sys.path.insert(0, str(keyset_path))

from services.integration_service import IntegrationService
from workers.turbo_parser_gui_wrapper import TurboParserGUI


class TestIntegration:
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.results_received = []
        self.progress_updates = []
        self.log_messages = []
    
    def on_result(self, phrase: str, result: dict):
        """Callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.results_received.append((phrase, result))
        print(f"[RESULT] {phrase}: {result}")
    
    def on_progress(self, current: int, total: int):
        """Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_updates.append((current, total))
        percent = int((current / total) * 100) if total > 0 else 0
        print(f"[PROGRESS] {current}/{total} ({percent}%)")
    
    def on_log(self, message: str):
        """Callback –¥–ª—è –ª–æ–≥–æ–≤"""
        self.log_messages.append(message)
        print(f"[LOG] {message}")
    
    def on_finished(self, results: list):
        """Callback –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"[FINISHED] –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print(f"[FINISHED] –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {len(self.log_messages)}")
        print(f"[FINISHED] –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {len(self.progress_updates)}")
    
    def on_error(self, error: str):
        """Callback –æ—à–∏–±–∫–∏"""
        print(f"[ERROR] {error}")
    
    async def test_integration_service(self):
        """–¢–µ—Å—Ç IntegrationService"""
        print("=" * 60)
        print("–¢–ï–°–¢ 1: IntegrationService")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º IntegrationService
        integration = IntegrationService()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º callbacks
        integration.onResult.connect(self.on_result)
        integration.onProgress.connect(self.on_progress)
        integration.onLog.connect(self.on_log)
        integration.onFinished.connect(self.on_finished)
        integration.onError.connect(self.on_error)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        test_phrases = [
            "—Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä",
            "–æ—Ç–¥–µ–ª–∫–∞ —Å—Ç–µ–Ω",
            "–ø–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–æ–≤"
        ]
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            integration.start_parsing(
                phrases=test_phrases,
                account_name="wordstat_main",
                region=225,
                modes={"ws": True, "qws": False, "bws": False},
                headless=True  # –ë–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            )
            
            # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(2)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            integration.stop_parsing()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
            print(f"- –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(self.results_received)}")
            print(f"- –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {len(self.progress_updates)}")
            print(f"- –õ–æ–≥–æ–≤: {len(self.log_messages)}")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ IntegrationService: {e}")
            return False
    
    async def test_parser_gui_wrapper(self):
        """–¢–µ—Å—Ç TurboParserGUI –Ω–∞–ø—Ä—è–º—É—é"""
        print("\n" + "=" * 60)
        print("–¢–ï–°–¢ 2: TurboParserGUI –Ω–∞–ø—Ä—è–º—É—é")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = TurboParserGUI(
            on_result=self.on_result,
            on_progress=self.on_progress,
            on_log=self.on_log
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        test_phrases = [
            "—Ä–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä",
            "–æ—Ç–¥–µ–ª–∫–∞ —Å—Ç–µ–Ω"
        ]
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            results = await parser.parse_phrases(
                account="wordstat_main",
                profile_path="C:/AI/yandex/.profiles/wordstat_main",
                phrases=test_phrases,
                modes={"ws": True, "qws": False, "bws": False},
                region=225,
                proxy_uri=None
            )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            await parser.stop()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
            print(f"- –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(self.results_received)}")
            print(f"- –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {len(self.progress_updates)}")
            print(f"- –õ–æ–≥–æ–≤: {len(self.log_messages)}")
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ TurboParserGUI: {e}")
            return False
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("–ù–ê–ß–ê–õ–û –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: IntegrationService
        test1_result = await self.test_integration_service()
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        self.results_received.clear()
        self.progress_updates.clear()
        self.log_messages.clear()
        
        # –¢–µ—Å—Ç 2: TurboParserGUI –Ω–∞–ø—Ä—è–º—É—é
        test2_result = await self.test_parser_gui_wrapper()
        
        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("–ò–¢–û–ì–ò –¢–ï–°–¢–û–í")
        print("=" * 60)
        print(f"IntegrationService: {'‚úÖ –£–°–ü–ï–•' if test1_result else '‚ùå –û–®–ò–ë–ö–ê'}")
        print(f"TurboParserGUI: {'‚úÖ –£–°–ü–ï–•' if test2_result else '‚ùå –û–®–ò–ë–ö–ê'}")
        
        if test1_result and test2_result:
            print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ GUI")
        else:
            print("\n‚ùå –ß–ê–°–¢–¨ –¢–ï–°–¢–û–í –ù–ï –ü–†–û–ô–î–ï–ù–ê")
            print("–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
        return test1_result and test2_result


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    tester = TestIntegration()
    success = await tester.run_tests()
    
    if success:
        print("\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å GUI –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª")
    else:
        print("\n‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
    
    return success


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    result = asyncio.run(main())
    sys.exit(0 if result else 1)